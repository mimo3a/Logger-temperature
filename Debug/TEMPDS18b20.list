
TEMPDS18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004030  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080041c0  080041c0  000051c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004254  08004254  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800425c  0800425c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800425c  0800425c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004264  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  080042c0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080042c0  00006250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6e9  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001866  00000000  00000000  00010775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00011fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006df  00000000  00000000  000128e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a5d  00000000  00000000  00012fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac9f  00000000  00000000  00038a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7a2c  00000000  00000000  000436bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b0e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b0  00000000  00000000  0012b12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0012dadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041a8 	.word	0x080041a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080041a8 	.word	0x080041a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b988 	b.w	8000920 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	468e      	mov	lr, r1
 8000630:	4604      	mov	r4, r0
 8000632:	4688      	mov	r8, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d962      	bls.n	8000704 <__udivmoddi4+0xdc>
 800063e:	fab2 f682 	clz	r6, r2
 8000642:	b14e      	cbz	r6, 8000658 <__udivmoddi4+0x30>
 8000644:	f1c6 0320 	rsb	r3, r6, #32
 8000648:	fa01 f806 	lsl.w	r8, r1, r6
 800064c:	fa20 f303 	lsr.w	r3, r0, r3
 8000650:	40b7      	lsls	r7, r6
 8000652:	ea43 0808 	orr.w	r8, r3, r8
 8000656:	40b4      	lsls	r4, r6
 8000658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800065c:	fa1f fc87 	uxth.w	ip, r7
 8000660:	fbb8 f1fe 	udiv	r1, r8, lr
 8000664:	0c23      	lsrs	r3, r4, #16
 8000666:	fb0e 8811 	mls	r8, lr, r1, r8
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fb01 f20c 	mul.w	r2, r1, ip
 8000672:	429a      	cmp	r2, r3
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0x62>
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	f101 30ff 	add.w	r0, r1, #4294967295
 800067c:	f080 80ea 	bcs.w	8000854 <__udivmoddi4+0x22c>
 8000680:	429a      	cmp	r2, r3
 8000682:	f240 80e7 	bls.w	8000854 <__udivmoddi4+0x22c>
 8000686:	3902      	subs	r1, #2
 8000688:	443b      	add	r3, r7
 800068a:	1a9a      	subs	r2, r3, r2
 800068c:	b2a3      	uxth	r3, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800069a:	fb00 fc0c 	mul.w	ip, r0, ip
 800069e:	459c      	cmp	ip, r3
 80006a0:	d909      	bls.n	80006b6 <__udivmoddi4+0x8e>
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006a8:	f080 80d6 	bcs.w	8000858 <__udivmoddi4+0x230>
 80006ac:	459c      	cmp	ip, r3
 80006ae:	f240 80d3 	bls.w	8000858 <__udivmoddi4+0x230>
 80006b2:	443b      	add	r3, r7
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ba:	eba3 030c 	sub.w	r3, r3, ip
 80006be:	2100      	movs	r1, #0
 80006c0:	b11d      	cbz	r5, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40f3      	lsrs	r3, r6
 80006c4:	2200      	movs	r2, #0
 80006c6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d905      	bls.n	80006de <__udivmoddi4+0xb6>
 80006d2:	b10d      	cbz	r5, 80006d8 <__udivmoddi4+0xb0>
 80006d4:	e9c5 0100 	strd	r0, r1, [r5]
 80006d8:	2100      	movs	r1, #0
 80006da:	4608      	mov	r0, r1
 80006dc:	e7f5      	b.n	80006ca <__udivmoddi4+0xa2>
 80006de:	fab3 f183 	clz	r1, r3
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d146      	bne.n	8000774 <__udivmoddi4+0x14c>
 80006e6:	4573      	cmp	r3, lr
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xc8>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 8105 	bhi.w	80008fa <__udivmoddi4+0x2d2>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4690      	mov	r8, r2
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0e5      	beq.n	80006ca <__udivmoddi4+0xa2>
 80006fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000702:	e7e2      	b.n	80006ca <__udivmoddi4+0xa2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	f000 8090 	beq.w	800082a <__udivmoddi4+0x202>
 800070a:	fab2 f682 	clz	r6, r2
 800070e:	2e00      	cmp	r6, #0
 8000710:	f040 80a4 	bne.w	800085c <__udivmoddi4+0x234>
 8000714:	1a8a      	subs	r2, r1, r2
 8000716:	0c03      	lsrs	r3, r0, #16
 8000718:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800071c:	b280      	uxth	r0, r0
 800071e:	b2bc      	uxth	r4, r7
 8000720:	2101      	movs	r1, #1
 8000722:	fbb2 fcfe 	udiv	ip, r2, lr
 8000726:	fb0e 221c 	mls	r2, lr, ip, r2
 800072a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072e:	fb04 f20c 	mul.w	r2, r4, ip
 8000732:	429a      	cmp	r2, r3
 8000734:	d907      	bls.n	8000746 <__udivmoddi4+0x11e>
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	f10c 38ff 	add.w	r8, ip, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x11c>
 800073e:	429a      	cmp	r2, r3
 8000740:	f200 80e0 	bhi.w	8000904 <__udivmoddi4+0x2dc>
 8000744:	46c4      	mov	ip, r8
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	fbb3 f2fe 	udiv	r2, r3, lr
 800074c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000750:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000754:	fb02 f404 	mul.w	r4, r2, r4
 8000758:	429c      	cmp	r4, r3
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x144>
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x142>
 8000764:	429c      	cmp	r4, r3
 8000766:	f200 80ca 	bhi.w	80008fe <__udivmoddi4+0x2d6>
 800076a:	4602      	mov	r2, r0
 800076c:	1b1b      	subs	r3, r3, r4
 800076e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000772:	e7a5      	b.n	80006c0 <__udivmoddi4+0x98>
 8000774:	f1c1 0620 	rsb	r6, r1, #32
 8000778:	408b      	lsls	r3, r1
 800077a:	fa22 f706 	lsr.w	r7, r2, r6
 800077e:	431f      	orrs	r7, r3
 8000780:	fa0e f401 	lsl.w	r4, lr, r1
 8000784:	fa20 f306 	lsr.w	r3, r0, r6
 8000788:	fa2e fe06 	lsr.w	lr, lr, r6
 800078c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000790:	4323      	orrs	r3, r4
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	fa1f fc87 	uxth.w	ip, r7
 800079a:	fbbe f0f9 	udiv	r0, lr, r9
 800079e:	0c1c      	lsrs	r4, r3, #16
 80007a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	d909      	bls.n	80007c8 <__udivmoddi4+0x1a0>
 80007b4:	193c      	adds	r4, r7, r4
 80007b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ba:	f080 809c 	bcs.w	80008f6 <__udivmoddi4+0x2ce>
 80007be:	45a6      	cmp	lr, r4
 80007c0:	f240 8099 	bls.w	80008f6 <__udivmoddi4+0x2ce>
 80007c4:	3802      	subs	r0, #2
 80007c6:	443c      	add	r4, r7
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	fa1f fe83 	uxth.w	lr, r3
 80007d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d4:	fb09 4413 	mls	r4, r9, r3, r4
 80007d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e0:	45a4      	cmp	ip, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x1ce>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007ea:	f080 8082 	bcs.w	80008f2 <__udivmoddi4+0x2ca>
 80007ee:	45a4      	cmp	ip, r4
 80007f0:	d97f      	bls.n	80008f2 <__udivmoddi4+0x2ca>
 80007f2:	3b02      	subs	r3, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007fa:	eba4 040c 	sub.w	r4, r4, ip
 80007fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000802:	4564      	cmp	r4, ip
 8000804:	4673      	mov	r3, lr
 8000806:	46e1      	mov	r9, ip
 8000808:	d362      	bcc.n	80008d0 <__udivmoddi4+0x2a8>
 800080a:	d05f      	beq.n	80008cc <__udivmoddi4+0x2a4>
 800080c:	b15d      	cbz	r5, 8000826 <__udivmoddi4+0x1fe>
 800080e:	ebb8 0203 	subs.w	r2, r8, r3
 8000812:	eb64 0409 	sbc.w	r4, r4, r9
 8000816:	fa04 f606 	lsl.w	r6, r4, r6
 800081a:	fa22 f301 	lsr.w	r3, r2, r1
 800081e:	431e      	orrs	r6, r3
 8000820:	40cc      	lsrs	r4, r1
 8000822:	e9c5 6400 	strd	r6, r4, [r5]
 8000826:	2100      	movs	r1, #0
 8000828:	e74f      	b.n	80006ca <__udivmoddi4+0xa2>
 800082a:	fbb1 fcf2 	udiv	ip, r1, r2
 800082e:	0c01      	lsrs	r1, r0, #16
 8000830:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000834:	b280      	uxth	r0, r0
 8000836:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800083a:	463b      	mov	r3, r7
 800083c:	4638      	mov	r0, r7
 800083e:	463c      	mov	r4, r7
 8000840:	46b8      	mov	r8, r7
 8000842:	46be      	mov	lr, r7
 8000844:	2620      	movs	r6, #32
 8000846:	fbb1 f1f7 	udiv	r1, r1, r7
 800084a:	eba2 0208 	sub.w	r2, r2, r8
 800084e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000852:	e766      	b.n	8000722 <__udivmoddi4+0xfa>
 8000854:	4601      	mov	r1, r0
 8000856:	e718      	b.n	800068a <__udivmoddi4+0x62>
 8000858:	4610      	mov	r0, r2
 800085a:	e72c      	b.n	80006b6 <__udivmoddi4+0x8e>
 800085c:	f1c6 0220 	rsb	r2, r6, #32
 8000860:	fa2e f302 	lsr.w	r3, lr, r2
 8000864:	40b7      	lsls	r7, r6
 8000866:	40b1      	lsls	r1, r6
 8000868:	fa20 f202 	lsr.w	r2, r0, r2
 800086c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000870:	430a      	orrs	r2, r1
 8000872:	fbb3 f8fe 	udiv	r8, r3, lr
 8000876:	b2bc      	uxth	r4, r7
 8000878:	fb0e 3318 	mls	r3, lr, r8, r3
 800087c:	0c11      	lsrs	r1, r2, #16
 800087e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000882:	fb08 f904 	mul.w	r9, r8, r4
 8000886:	40b0      	lsls	r0, r6
 8000888:	4589      	cmp	r9, r1
 800088a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800088e:	b280      	uxth	r0, r0
 8000890:	d93e      	bls.n	8000910 <__udivmoddi4+0x2e8>
 8000892:	1879      	adds	r1, r7, r1
 8000894:	f108 3cff 	add.w	ip, r8, #4294967295
 8000898:	d201      	bcs.n	800089e <__udivmoddi4+0x276>
 800089a:	4589      	cmp	r9, r1
 800089c:	d81f      	bhi.n	80008de <__udivmoddi4+0x2b6>
 800089e:	eba1 0109 	sub.w	r1, r1, r9
 80008a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008a6:	fb09 f804 	mul.w	r8, r9, r4
 80008aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ae:	b292      	uxth	r2, r2
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	4542      	cmp	r2, r8
 80008b6:	d229      	bcs.n	800090c <__udivmoddi4+0x2e4>
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80008be:	d2c4      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c0:	4542      	cmp	r2, r8
 80008c2:	d2c2      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c4:	f1a9 0102 	sub.w	r1, r9, #2
 80008c8:	443a      	add	r2, r7
 80008ca:	e7be      	b.n	800084a <__udivmoddi4+0x222>
 80008cc:	45f0      	cmp	r8, lr
 80008ce:	d29d      	bcs.n	800080c <__udivmoddi4+0x1e4>
 80008d0:	ebbe 0302 	subs.w	r3, lr, r2
 80008d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008d8:	3801      	subs	r0, #1
 80008da:	46e1      	mov	r9, ip
 80008dc:	e796      	b.n	800080c <__udivmoddi4+0x1e4>
 80008de:	eba7 0909 	sub.w	r9, r7, r9
 80008e2:	4449      	add	r1, r9
 80008e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ec:	fb09 f804 	mul.w	r8, r9, r4
 80008f0:	e7db      	b.n	80008aa <__udivmoddi4+0x282>
 80008f2:	4673      	mov	r3, lr
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1ce>
 80008f6:	4650      	mov	r0, sl
 80008f8:	e766      	b.n	80007c8 <__udivmoddi4+0x1a0>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e6fd      	b.n	80006fa <__udivmoddi4+0xd2>
 80008fe:	443b      	add	r3, r7
 8000900:	3a02      	subs	r2, #2
 8000902:	e733      	b.n	800076c <__udivmoddi4+0x144>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	443b      	add	r3, r7
 800090a:	e71c      	b.n	8000746 <__udivmoddi4+0x11e>
 800090c:	4649      	mov	r1, r9
 800090e:	e79c      	b.n	800084a <__udivmoddi4+0x222>
 8000910:	eba1 0109 	sub.w	r1, r1, r9
 8000914:	46c4      	mov	ip, r8
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fb09 f804 	mul.w	r8, r9, r4
 800091e:	e7c4      	b.n	80008aa <__udivmoddi4+0x282>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
    uint32_t start = DWT->CYCCNT;
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <delay_us+0x40>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 8000934:	88fc      	ldrh	r4, [r7, #6]
 8000936:	f001 fc97 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 800093a:	4603      	mov	r3, r0
 800093c:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <delay_us+0x44>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	0c9b      	lsrs	r3, r3, #18
 8000944:	fb04 f303 	mul.w	r3, r4, r3
 8000948:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 800094a:	bf00      	nop
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <delay_us+0x40>)
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	429a      	cmp	r2, r3
 8000958:	d8f8      	bhi.n	800094c <delay_us+0x28>
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	e0001000 	.word	0xe0001000
 8000968:	431bde83 	.word	0x431bde83

0800096c <DWT_Init>:

void DWT_Init(void) {
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <DWT_Init+0x28>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <DWT_Init+0x28>)
 8000976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800097a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <DWT_Init+0x2c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <DWT_Init+0x2c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000edf0 	.word	0xe000edf0
 8000998:	e0001000 	.word	0xe0001000

0800099c <OneWire_Reset>:

// --- 1-Wire функции ---
void OneWire_Reset(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009aa:	f000 fe79 	bl	80016a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b6:	f000 fe73 	bl	80016a0 <HAL_GPIO_WritePin>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

    // Output LOW 480 µs
    GPIO_InitStruct.Pin = DS_PIN;
 80009c8:	2302      	movs	r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d8:	f000 fca0 	bl	800131c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2102      	movs	r1, #2
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e4:	f000 fe5c 	bl	80016a0 <HAL_GPIO_WritePin>
    delay_us(480);
 80009e8:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80009ec:	f7ff ff9a 	bl	8000924 <delay_us>

    // Input (ждем ответ)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f000 fc8e 	bl	800131c <HAL_GPIO_Init>
    delay_us(60);
 8000a00:	203c      	movs	r0, #60	@ 0x3c
 8000a02:	f7ff ff8f 	bl	8000924 <delay_us>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <OneWire_WriteBit>:

void OneWire_WriteBit(uint8_t bit) {
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b088      	sub	sp, #32
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DS_PIN;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3a:	f000 fc6f 	bl	800131c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a46:	f000 fe2b 	bl	80016a0 <HAL_GPIO_WritePin>

    if (bit) {
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00f      	beq.n	8000a70 <OneWire_WriteBit+0x62>
        delay_us(5);
 8000a50:	2005      	movs	r0, #5
 8000a52:	f7ff ff67 	bl	8000924 <delay_us>
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a64:	f000 fc5a 	bl	800131c <HAL_GPIO_Init>
        delay_us(60);
 8000a68:	203c      	movs	r0, #60	@ 0x3c
 8000a6a:	f7ff ff5b 	bl	8000924 <delay_us>
    } else {
        delay_us(60);
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
        HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
    }
}
 8000a6e:	e00b      	b.n	8000a88 <OneWire_WriteBit+0x7a>
        delay_us(60);
 8000a70:	203c      	movs	r0, #60	@ 0x3c
 8000a72:	f7ff ff57 	bl	8000924 <delay_us>
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f000 fc4a 	bl	800131c <HAL_GPIO_Init>
}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
    uint8_t bit = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	75fb      	strb	r3, [r7, #23]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

    // pull low
    GPIO_InitStruct.Pin = DS_PIN;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab8:	f000 fc30 	bl	800131c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2102      	movs	r1, #2
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac4:	f000 fdec 	bl	80016a0 <HAL_GPIO_WritePin>
    delay_us(3);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f7ff ff2b 	bl	8000924 <delay_us>

    // release
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(DS_PORT, &GPIO_InitStruct);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f000 fc1f 	bl	800131c <HAL_GPIO_Init>
    delay_us(10);
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f7ff ff20 	bl	8000924 <delay_us>
    bit = HAL_GPIO_ReadPin(DS_PORT, DS_PIN);
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f000 fdc1 	bl	8001670 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	75fb      	strb	r3, [r7, #23]
    delay_us(50);
 8000af2:	2032      	movs	r0, #50	@ 0x32
 8000af4:	f7ff ff16 	bl	8000924 <delay_us>

    return bit;
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <OneWire_WriteByte>:

void OneWire_WriteByte(uint8_t data) {
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e00c      	b.n	8000b2c <OneWire_WriteByte+0x2a>
        OneWire_WriteBit(data & 0x01);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff77 	bl	8000a0e <OneWire_WriteBit>
        data >>= 1;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b07      	cmp	r3, #7
 8000b30:	ddef      	ble.n	8000b12 <OneWire_WriteByte+0x10>
    }
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	e00e      	b.n	8000b6a <OneWire_ReadByte+0x2e>
        value >>= 1;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	71fb      	strb	r3, [r7, #7]
        if (OneWire_ReadBit()) value |= 0x80;
 8000b52:	f7ff ff9d 	bl	8000a90 <OneWire_ReadBit>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <OneWire_ReadByte+0x28>
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b62:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b07      	cmp	r3, #7
 8000b6e:	dded      	ble.n	8000b4c <OneWire_ReadByte+0x10>
    }
    return value;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0b4      	sub	sp, #208	@ 0xd0
 8000b80:	af00      	add	r7, sp, #0
    HAL_Init();
 8000b82:	f000 fa45 	bl	8001010 <HAL_Init>
    SystemClock_Config();
 8000b86:	f000 f85b 	bl	8000c40 <SystemClock_Config>
    MX_GPIO_Init();
 8000b8a:	f000 f8db 	bl	8000d44 <MX_GPIO_Init>
    DWT_Init();
 8000b8e:	f7ff feed 	bl	800096c <DWT_Init>

    UART_HandleTypeDef huart2;
    MX_USART2_UART_Init();
 8000b92:	f000 f8a7 	bl	8000ce4 <MX_USART2_UART_Init>

    while (1) {
        char buffer[64];

        OneWire_Reset();
 8000b96:	f7ff ff01 	bl	800099c <OneWire_Reset>
        OneWire_WriteByte(0xCC); // Skip ROM
 8000b9a:	20cc      	movs	r0, #204	@ 0xcc
 8000b9c:	f7ff ffb1 	bl	8000b02 <OneWire_WriteByte>
        OneWire_WriteByte(0x44); // Convert T
 8000ba0:	2044      	movs	r0, #68	@ 0x44
 8000ba2:	f7ff ffae 	bl	8000b02 <OneWire_WriteByte>

        HAL_Delay(750); // ждать преобразование
 8000ba6:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000baa:	f000 faad 	bl	8001108 <HAL_Delay>

        OneWire_Reset();
 8000bae:	f7ff fef5 	bl	800099c <OneWire_Reset>
        OneWire_WriteByte(0xCC); // Skip ROM
 8000bb2:	20cc      	movs	r0, #204	@ 0xcc
 8000bb4:	f7ff ffa5 	bl	8000b02 <OneWire_WriteByte>
        OneWire_WriteByte(0xBE); // Read Scratchpad
 8000bb8:	20be      	movs	r0, #190	@ 0xbe
 8000bba:	f7ff ffa2 	bl	8000b02 <OneWire_WriteByte>

        uint8_t temp_l = OneWire_ReadByte();
 8000bbe:	f7ff ffbd 	bl	8000b3c <OneWire_ReadByte>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
        uint8_t temp_h = OneWire_ReadByte();
 8000bc8:	f7ff ffb8 	bl	8000b3c <OneWire_ReadByte>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce

        int16_t rawTemp = (temp_h << 8) | temp_l;
 8000bd2:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
        float temperature = (float)rawTemp / 16.0f;
 8000be8:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bfc:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8

        sprintf(buffer, "Temperature: %.2f °C\r\n", temperature);
 8000c00:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8000c04:	f7ff fca0 	bl	8000548 <__aeabi_f2d>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	490b      	ldr	r1, [pc, #44]	@ (8000c3c <main+0xc0>)
 8000c10:	f002 fe2a 	bl	8003868 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c14:	463b      	mov	r3, r7
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fada 	bl	80001d0 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4639      	mov	r1, r7
 8000c22:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	f002 f8bf 	bl	8002dac <HAL_UART_Transmit>

        HAL_Delay(1000);
 8000c2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c32:	f000 fa69 	bl	8001108 <HAL_Delay>
    while (1) {
 8000c36:	bf00      	nop
 8000c38:	e7ad      	b.n	8000b96 <main+0x1a>
 8000c3a:	bf00      	nop
 8000c3c:	080041c0 	.word	0x080041c0

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	@ 0x58
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2244      	movs	r2, #68	@ 0x44
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fe2c 	bl	80038ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c66:	f000 fd41 	bl	80016ec <HAL_PWREx_ControlVoltageScaling>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c70:	f000 f8a6 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c86:	2302      	movs	r3, #2
 8000c88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c8e:	2314      	movs	r3, #20
 8000c90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c92:	2307      	movs	r3, #7
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fd78 	bl	8001798 <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cae:	f000 f887 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f940 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cd6:	f000 f873 	bl	8000dc0 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3758      	adds	r7, #88	@ 0x58
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <MX_USART2_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cf0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d28:	f001 fff2 	bl	8002d10 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 f845 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000078 	.word	0x20000078
 8000d40:	40004400 	.word	0x40004400

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_GPIO_Init+0x78>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <MX_GPIO_Init+0x78>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_GPIO_Init+0x78>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_GPIO_Init+0x78>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <MX_GPIO_Init+0x78>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_GPIO_Init+0x78>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d92:	f000 fc85 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d96:	2302      	movs	r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db0:	f000 fab4 	bl	800131c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ac      	sub	sp, #176	@ 0xb0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2288      	movs	r2, #136	@ 0x88
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 fd39 	bl	80038ac <memset>
  if(huart->Instance==USART2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <HAL_UART_MspInit+0xb0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13b      	bne.n	8000ebc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 faa1 	bl	8002398 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e5c:	f7ff ffb0 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e64:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7c:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e84:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f000 fa30 	bl	800131c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ebc:	bf00      	nop
 8000ebe:	37b0      	adds	r7, #176	@ 0xb0
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40021000 	.word	0x40021000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f22:	f000 f8d1 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f002 fcae 	bl	80038bc <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20018000 	.word	0x20018000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000100 	.word	0x20000100
 8000f94:	20000250 	.word	0x20000250

08000f98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ffea 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 fc6d 	bl	80038c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fdc5 	bl	8000b7c <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001000:	08004264 	.word	0x08004264
  ldr r2, =_sbss
 8001004:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001008:	20000250 	.word	0x20000250

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_Init+0x3c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_Init+0x3c>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001024:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f944 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f80f 	bl	8001050 <HAL_InitTick>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	e001      	b.n	8001042 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103e:	f7ff fec5 	bl	8000dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001042:	79fb      	ldrb	r3, [r7, #7]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_InitTick+0x70>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <HAL_InitTick+0x6c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f941 	bl	8001302 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10f      	bne.n	80010a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d809      	bhi.n	80010a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f919 	bl	80012ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_InitTick+0x74>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e007      	b.n	80010b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e004      	b.n	80010b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e001      	b.n	80010b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000104 	.word	0x20000104

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000104 	.word	0x20000104

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff47 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff5c 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffb0 	bl	8001270 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e17f      	b.n	800162c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2101      	movs	r1, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8171 	beq.w	8001626 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d005      	beq.n	800135c <HAL_GPIO_Init+0x40>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d130      	bne.n	80013be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001392:	2201      	movs	r2, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f003 0201 	and.w	r2, r3, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d118      	bne.n	80013fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d017      	beq.n	8001438 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80ac 	beq.w	8001626 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <HAL_GPIO_Init+0x330>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	4a5e      	ldr	r2, [pc, #376]	@ (800164c <HAL_GPIO_Init+0x330>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014da:	4b5c      	ldr	r3, [pc, #368]	@ (800164c <HAL_GPIO_Init+0x330>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001650 <HAL_GPIO_Init+0x334>)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001510:	d025      	beq.n	800155e <HAL_GPIO_Init+0x242>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4f      	ldr	r2, [pc, #316]	@ (8001654 <HAL_GPIO_Init+0x338>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01f      	beq.n	800155a <HAL_GPIO_Init+0x23e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4e      	ldr	r2, [pc, #312]	@ (8001658 <HAL_GPIO_Init+0x33c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x23a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4d      	ldr	r2, [pc, #308]	@ (800165c <HAL_GPIO_Init+0x340>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x236>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4c      	ldr	r2, [pc, #304]	@ (8001660 <HAL_GPIO_Init+0x344>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x232>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4b      	ldr	r2, [pc, #300]	@ (8001664 <HAL_GPIO_Init+0x348>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x22e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4a      	ldr	r2, [pc, #296]	@ (8001668 <HAL_GPIO_Init+0x34c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x22a>
 8001542:	2306      	movs	r3, #6
 8001544:	e00c      	b.n	8001560 <HAL_GPIO_Init+0x244>
 8001546:	2307      	movs	r3, #7
 8001548:	e00a      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800154a:	2305      	movs	r3, #5
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800154e:	2304      	movs	r3, #4
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x244>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x244>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800155e:	2300      	movs	r3, #0
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001570:	4937      	ldr	r1, [pc, #220]	@ (8001650 <HAL_GPIO_Init+0x334>)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800157e:	4b3b      	ldr	r3, [pc, #236]	@ (800166c <HAL_GPIO_Init+0x350>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015a2:	4a32      	ldr	r2, [pc, #200]	@ (800166c <HAL_GPIO_Init+0x350>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a8:	4b30      	ldr	r3, [pc, #192]	@ (800166c <HAL_GPIO_Init+0x350>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015cc:	4a27      	ldr	r2, [pc, #156]	@ (800166c <HAL_GPIO_Init+0x350>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_GPIO_Init+0x350>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f6:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_GPIO_Init+0x350>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_GPIO_Init+0x350>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001620:	4a12      	ldr	r2, [pc, #72]	@ (800166c <HAL_GPIO_Init+0x350>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f ae78 	bne.w	800132c <HAL_GPIO_Init+0x10>
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	48000400 	.word	0x48000400
 8001658:	48000800 	.word	0x48000800
 800165c:	48000c00 	.word	0x48000c00
 8001660:	48001000 	.word	0x48001000
 8001664:	48001400 	.word	0x48001400
 8001668:	48001800 	.word	0x48001800
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e001      	b.n	8001692 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016bc:	e002      	b.n	80016c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016fa:	d130      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001708:	d038      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001712:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2232      	movs	r2, #50	@ 0x32
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001730:	e002      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001744:	d102      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f2      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001758:	d110      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e00f      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176a:	d007      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001774:	4a05      	ldr	r2, [pc, #20]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e3ca      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b97      	ldr	r3, [pc, #604]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b4:	4b94      	ldr	r3, [pc, #592]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80e4 	beq.w	8001994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4a>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	f040 808b 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	f040 8087 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e2:	4b89      	ldr	r3, [pc, #548]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x62>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e3a2      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	4b82      	ldr	r3, [pc, #520]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_RCC_OscConfig+0x7c>
 800180a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001812:	e005      	b.n	8001820 <HAL_RCC_OscConfig+0x88>
 8001814:	4b7c      	ldr	r3, [pc, #496]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001820:	4293      	cmp	r3, r2
 8001822:	d223      	bcs.n	800186c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd55 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e383      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4b73      	ldr	r3, [pc, #460]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a72      	ldr	r2, [pc, #456]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	496d      	ldr	r1, [pc, #436]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001856:	4b6c      	ldr	r3, [pc, #432]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4968      	ldr	r1, [pc, #416]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
 800186a:	e025      	b.n	80018b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a65      	ldr	r2, [pc, #404]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4960      	ldr	r1, [pc, #384]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	495b      	ldr	r1, [pc, #364]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fd15 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e343      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b8:	f000 fc4a 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b52      	ldr	r3, [pc, #328]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	4950      	ldr	r1, [pc, #320]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a10 <HAL_RCC_OscConfig+0x278>)
 80018d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a14 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fbb7 	bl	8001050 <HAL_InitTick>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d052      	beq.n	8001992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	e327      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d032      	beq.n	800195e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f8:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001904:	f7ff fbf4 	bl	80010f0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190c:	f7ff fbf0 	bl	80010f0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e310      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192a:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4931      	ldr	r1, [pc, #196]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001948:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	492c      	ldr	r1, [pc, #176]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e01a      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196a:	f7ff fbc1 	bl	80010f0 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001972:	f7ff fbbd 	bl	80010f0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2dd      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x1da>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d074      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x21a>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d10e      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d064      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d160      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e2ba      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x24a>
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e026      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ea:	d115      	bne.n	8001a18 <HAL_RCC_OscConfig+0x280>
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a02      	ldr	r2, [pc, #8]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	080041d8 	.word	0x080041d8
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004
 8001a18:	4ba0      	ldr	r3, [pc, #640]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9f      	ldr	r2, [pc, #636]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b9d      	ldr	r3, [pc, #628]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a9c      	ldr	r2, [pc, #624]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb5a 	bl	80010f0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fb56 	bl	80010f0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e276      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	4b92      	ldr	r3, [pc, #584]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2a8>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb46 	bl	80010f0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fb42 	bl	80010f0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e262      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	4b88      	ldr	r3, [pc, #544]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d0>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d060      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x310>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d116      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x328>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e23f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	4973      	ldr	r1, [pc, #460]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e040      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fb01 	bl	80010f0 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fafd 	bl	80010f0 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e21d      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b62      	ldr	r3, [pc, #392]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	495f      	ldr	r1, [pc, #380]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e018      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b5d      	ldr	r3, [pc, #372]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff fadd 	bl	80010f0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fad9 	bl	80010f0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1f9      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d03c      	beq.n	8001bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b72:	4a4a      	ldr	r2, [pc, #296]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fab8 	bl	80010f0 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff fab4 	bl	80010f0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1d4      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ef      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3ec>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bac:	4a3b      	ldr	r2, [pc, #236]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fa9b 	bl	80010f0 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fa97 	bl	80010f0 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1b7      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a6 	beq.w	8001d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a26      	ldr	r2, [pc, #152]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c08:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d118      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fa5e 	bl	80010f0 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff fa5a 	bl	80010f0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e17a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d8>
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c6e:	e029      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d115      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x50c>
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8e:	4a03      	ldr	r2, [pc, #12]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001caa:	4a9b      	ldr	r2, [pc, #620]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cb4:	4b98      	ldr	r3, [pc, #608]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cba:	4a97      	ldr	r2, [pc, #604]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fa10 	bl	80010f0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fa0c 	bl	80010f0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e12a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b8b      	ldr	r3, [pc, #556]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x53c>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f9f9 	bl	80010f0 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f9f5 	bl	80010f0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e113      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b7f      	ldr	r3, [pc, #508]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	4a79      	ldr	r2, [pc, #484]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80fe 	beq.w	8001f3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 80d0 	bne.w	8001eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d4c:	4b72      	ldr	r3, [pc, #456]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d130      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d127      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d8c:	2a07      	cmp	r2, #7
 8001d8e:	bf14      	ite	ne
 8001d90:	2201      	movne	r2, #1
 8001d92:	2200      	moveq	r2, #0
 8001d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d113      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d06e      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d069      	beq.n	8001e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dc8:	4b53      	ldr	r3, [pc, #332]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dd4:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0ad      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001de4:	4b4c      	ldr	r3, [pc, #304]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df0:	f7ff f97e 	bl	80010f0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff f97a 	bl	80010f0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e09a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	4b43      	ldr	r3, [pc, #268]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e16:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_RCC_OscConfig+0x784>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e30:	0212      	lsls	r2, r2, #8
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e38:	0852      	lsrs	r2, r2, #1
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0552      	lsls	r2, r2, #21
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0652      	lsls	r2, r2, #25
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e50:	0912      	lsrs	r2, r2, #4
 8001e52:	0452      	lsls	r2, r2, #17
 8001e54:	430a      	orrs	r2, r1
 8001e56:	4930      	ldr	r1, [pc, #192]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e74:	f7ff f93c 	bl	80010f0 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f938 	bl	80010f0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e058      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9a:	e050      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e04f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d148      	bne.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec4:	f7ff f914 	bl	80010f0 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f910 	bl	80010f0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e030      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x734>
 8001eea:	e028      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d023      	beq.n	8001f3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f8f7 	bl	80010f0 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	e00c      	b.n	8001f20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff f8f3 	bl	80010f0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d905      	bls.n	8001f20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e013      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ec      	bne.n	8001f06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4905      	ldr	r1, [pc, #20]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_RCC_OscConfig+0x7b4>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
 8001f38:	e001      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	feeefffc 	.word	0xfeeefffc

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0e7      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b75      	ldr	r3, [pc, #468]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b72      	ldr	r3, [pc, #456]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4970      	ldr	r1, [pc, #448]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b6e      	ldr	r3, [pc, #440]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cf      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d908      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4960      	ldr	r1, [pc, #384]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0a6      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	4b54      	ldr	r3, [pc, #336]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e09a      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002006:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e08e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002016:	4b4a      	ldr	r3, [pc, #296]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e086      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b46      	ldr	r3, [pc, #280]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4943      	ldr	r1, [pc, #268]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002038:	f7ff f85a 	bl	80010f0 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff f856 	bl	80010f0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e06e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002080:	429a      	cmp	r2, r3
 8002082:	d208      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	492b      	ldr	r1, [pc, #172]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002096:	4b29      	ldr	r3, [pc, #164]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d210      	bcs.n	80020c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a4:	4b25      	ldr	r3, [pc, #148]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0207 	bic.w	r2, r3, #7
 80020ac:	4923      	ldr	r1, [pc, #140]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e036      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4918      	ldr	r1, [pc, #96]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4910      	ldr	r1, [pc, #64]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002104:	f000 f824 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	490b      	ldr	r1, [pc, #44]	@ (8002144 <HAL_RCC_ClockConfig+0x1f4>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x1fc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ff91 	bl	8001050 <HAL_InitTick>
 800212e:	4603      	mov	r3, r0
 8002130:	72fb      	strb	r3, [r7, #11]

  return status;
 8002132:	7afb      	ldrb	r3, [r7, #11]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	080041d8 	.word	0x080041d8
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002168:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x34>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d121      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d11e      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002190:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021ac:	4a2b      	ldr	r2, [pc, #172]	@ (800225c <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c8:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e004      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d4:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d134      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d003      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0xac>
 80021f4:	e005      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f8:	617b      	str	r3, [r7, #20]
      break;
 80021fa:	e005      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fe:	617b      	str	r3, [r7, #20]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	617b      	str	r3, [r7, #20]
      break;
 8002206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	3301      	adds	r3, #1
 8002214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	0e5b      	lsrs	r3, r3, #25
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	3301      	adds	r3, #1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002248:	69bb      	ldr	r3, [r7, #24]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	080041f0 	.word	0x080041f0
 8002260:	00f42400 	.word	0x00f42400
 8002264:	007a1200 	.word	0x007a1200

08002268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <HAL_RCC_GetHCLKFreq+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002284:	f7ff fff0 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4904      	ldr	r1, [pc, #16]	@ (80022a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	080041e8 	.word	0x080041e8

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b0:	f7ff ffda 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0adb      	lsrs	r3, r3, #11
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4904      	ldr	r1, [pc, #16]	@ (80022d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	080041e8 	.word	0x080041e8

080022d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f9ee 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
 80022f6:	e014      	b.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	@ 0x58
 8002304:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002310:	f7ff f9de 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 8002314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002328:	d10b      	bne.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b80      	cmp	r3, #128	@ 0x80
 800232e:	d919      	bls.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2ba0      	cmp	r3, #160	@ 0xa0
 8002334:	d902      	bls.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002336:	2302      	movs	r3, #2
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e013      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800233c:	2301      	movs	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	e010      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b80      	cmp	r3, #128	@ 0x80
 8002346:	d902      	bls.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002348:	2303      	movs	r3, #3
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e00a      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b80      	cmp	r3, #128	@ 0x80
 8002352:	d102      	bne.n	800235a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002354:	2302      	movs	r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	e004      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b70      	cmp	r3, #112	@ 0x70
 800235e:	d101      	bne.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 0207 	bic.w	r2, r3, #7
 800236c:	4909      	ldr	r1, [pc, #36]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a0:	2300      	movs	r3, #0
 80023a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a4:	2300      	movs	r3, #0
 80023a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d041      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023bc:	d02a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023c2:	d824      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ce:	d81e      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d8:	d010      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023da:	e018      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023dc:	4b86      	ldr	r3, [pc, #536]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a85      	ldr	r2, [pc, #532]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e8:	e015      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fabb 	bl	800296c <RCCEx_PLLSAI1_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023fa:	e00c      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3320      	adds	r3, #32
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fba6 	bl	8002b54 <RCCEx_PLLSAI2_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800240c:	e003      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	74fb      	strb	r3, [r7, #19]
      break;
 8002412:	e000      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800241c:	4b76      	ldr	r3, [pc, #472]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800242a:	4973      	ldr	r1, [pc, #460]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002432:	e001      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d041      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002448:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800244c:	d02a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800244e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002452:	d824      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800245a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800245e:	d81e      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002468:	d010      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800246a:	e018      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800246c:	4b62      	ldr	r3, [pc, #392]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a61      	ldr	r2, [pc, #388]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002476:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002478:	e015      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fa73 	bl	800296c <RCCEx_PLLSAI1_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800248a:	e00c      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3320      	adds	r3, #32
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fb5e 	bl	8002b54 <RCCEx_PLLSAI2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800249c:	e003      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	74fb      	strb	r3, [r7, #19]
      break;
 80024a2:	e000      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ac:	4b52      	ldr	r3, [pc, #328]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ba:	494f      	ldr	r1, [pc, #316]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024c2:	e001      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a0 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fc:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002508:	2301      	movs	r3, #1
 800250a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3a      	ldr	r2, [pc, #232]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002518:	f7fe fdea 	bl	80010f0 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800251e:	e009      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7fe fde6 	bl	80010f0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d902      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	74fb      	strb	r3, [r7, #19]
        break;
 8002532:	e005      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002534:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ef      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d15c      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002546:	4b2c      	ldr	r3, [pc, #176]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01f      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	d019      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002564:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002570:	4b21      	ldr	r3, [pc, #132]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	4a20      	ldr	r2, [pc, #128]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002580:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002586:	4a1c      	ldr	r2, [pc, #112]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002590:	4a19      	ldr	r2, [pc, #100]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fda5 	bl	80010f0 <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a8:	e00b      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fda1 	bl	80010f0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d902      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	74fb      	strb	r3, [r7, #19]
            break;
 80025c0:	e006      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ec      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d6:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025e6:	4904      	ldr	r1, [pc, #16]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025ee:	e009      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
 80025f4:	e006      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002604:	7c7b      	ldrb	r3, [r7, #17]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b9e      	ldr	r3, [pc, #632]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	4a9d      	ldr	r2, [pc, #628]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002622:	4b98      	ldr	r3, [pc, #608]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f023 0203 	bic.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	4994      	ldr	r1, [pc, #592]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002644:	4b8f      	ldr	r3, [pc, #572]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f023 020c 	bic.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002652:	498c      	ldr	r1, [pc, #560]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002666:	4b87      	ldr	r3, [pc, #540]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	4983      	ldr	r1, [pc, #524]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002688:	4b7e      	ldr	r3, [pc, #504]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	497b      	ldr	r1, [pc, #492]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026aa:	4b76      	ldr	r3, [pc, #472]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b8:	4972      	ldr	r1, [pc, #456]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	496a      	ldr	r1, [pc, #424]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ee:	4b65      	ldr	r3, [pc, #404]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	4961      	ldr	r1, [pc, #388]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002710:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271e:	4959      	ldr	r1, [pc, #356]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002732:	4b54      	ldr	r3, [pc, #336]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002740:	4950      	ldr	r1, [pc, #320]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002754:	4b4b      	ldr	r3, [pc, #300]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	4948      	ldr	r1, [pc, #288]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4b43      	ldr	r3, [pc, #268]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	493f      	ldr	r1, [pc, #252]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d028      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027a6:	4937      	ldr	r1, [pc, #220]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b32      	ldr	r3, [pc, #200]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a31      	ldr	r2, [pc, #196]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
 80027c4:	e011      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ce:	d10c      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f8c8 	bl	800296c <RCCEx_PLLSAI1_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d028      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027f6:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	491f      	ldr	r1, [pc, #124]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002814:	d106      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002820:	60d3      	str	r3, [r2, #12]
 8002822:	e011      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f899 	bl	800296c <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02b      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002862:	4908      	ldr	r1, [pc, #32]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002872:	d109      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a02      	ldr	r2, [pc, #8]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
 8002880:	e014      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002890:	d10c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f867 	bl	800296c <RCCEx_PLLSAI1_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028c6:	4928      	ldr	r1, [pc, #160]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028d6:	d10d      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f844 	bl	800296c <RCCEx_PLLSAI1_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d014      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	74bb      	strb	r3, [r7, #18]
 80028f2:	e011      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3320      	adds	r3, #32
 8002902:	2102      	movs	r1, #2
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f925 	bl	8002b54 <RCCEx_PLLSAI2_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002924:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002932:	490d      	ldr	r1, [pc, #52]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002956:	4904      	ldr	r1, [pc, #16]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800295e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000

0800296c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800297a:	4b75      	ldr	r3, [pc, #468]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002986:	4b72      	ldr	r3, [pc, #456]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d10d      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
       ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800299e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
       ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d047      	beq.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e044      	b.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d018      	beq.n	80029f2 <RCCEx_PLLSAI1_Config+0x86>
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d825      	bhi.n	8002a10 <RCCEx_PLLSAI1_Config+0xa4>
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d002      	beq.n	80029ce <RCCEx_PLLSAI1_Config+0x62>
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d009      	beq.n	80029e0 <RCCEx_PLLSAI1_Config+0x74>
 80029cc:	e020      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ce:	4b60      	ldr	r3, [pc, #384]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11d      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029de:	e01a      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e013      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029f2:	4b57      	ldr	r3, [pc, #348]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029fe:	4b54      	ldr	r3, [pc, #336]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a0e:	e006      	b.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e004      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a26:	4b4a      	ldr	r3, [pc, #296]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	4944      	ldr	r1, [pc, #272]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d17d      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a48:	4b41      	ldr	r3, [pc, #260]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a40      	ldr	r2, [pc, #256]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe fb4c 	bl	80010f0 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a5c:	f7fe fb48 	bl	80010f0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a70:	4b37      	ldr	r3, [pc, #220]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ef      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d160      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a88:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	0211      	lsls	r1, r2, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	0912      	lsrs	r2, r2, #4
 8002aa0:	0452      	lsls	r2, r2, #17
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	492a      	ldr	r1, [pc, #168]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	610b      	str	r3, [r1, #16]
 8002aaa:	e027      	b.n	8002afc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d112      	bne.n	8002ad8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab2:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002aba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6892      	ldr	r2, [r2, #8]
 8002ac2:	0211      	lsls	r1, r2, #8
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6912      	ldr	r2, [r2, #16]
 8002ac8:	0852      	lsrs	r2, r2, #1
 8002aca:	3a01      	subs	r2, #1
 8002acc:	0552      	lsls	r2, r2, #21
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	491f      	ldr	r1, [pc, #124]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	610b      	str	r3, [r1, #16]
 8002ad6:	e011      	b.n	8002afc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ae0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6892      	ldr	r2, [r2, #8]
 8002ae8:	0211      	lsls	r1, r2, #8
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6952      	ldr	r2, [r2, #20]
 8002aee:	0852      	lsrs	r2, r2, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0652      	lsls	r2, r2, #25
 8002af4:	430a      	orrs	r2, r1
 8002af6:	4916      	ldr	r1, [pc, #88]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe faf2 	bl	80010f0 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b0e:	e009      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b10:	f7fe faee 	bl	80010f0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	73fb      	strb	r3, [r7, #15]
          break;
 8002b22:	e005      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	4904      	ldr	r1, [pc, #16]	@ (8002b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000

08002b54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b62:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d018      	beq.n	8002ba0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b6e:	4b67      	ldr	r3, [pc, #412]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10d      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
       ||
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b86:	4b61      	ldr	r3, [pc, #388]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
       ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d047      	beq.n	8002c2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e044      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d018      	beq.n	8002bda <RCCEx_PLLSAI2_Config+0x86>
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d825      	bhi.n	8002bf8 <RCCEx_PLLSAI2_Config+0xa4>
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d002      	beq.n	8002bb6 <RCCEx_PLLSAI2_Config+0x62>
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d009      	beq.n	8002bc8 <RCCEx_PLLSAI2_Config+0x74>
 8002bb4:	e020      	b.n	8002bf8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bb6:	4b55      	ldr	r3, [pc, #340]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d11d      	bne.n	8002bfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc6:	e01a      	b.n	8002bfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc8:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e013      	b.n	8002c02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bda:	4b4c      	ldr	r3, [pc, #304]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002be6:	4b49      	ldr	r3, [pc, #292]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bf6:	e006      	b.n	8002c06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfc:	e004      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e002      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	430b      	orrs	r3, r1
 8002c24:	4939      	ldr	r1, [pc, #228]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d167      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c30:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a35      	ldr	r2, [pc, #212]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fa58 	bl	80010f0 <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c42:	e009      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c44:	f7fe fa54 	bl	80010f0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	73fb      	strb	r3, [r7, #15]
        break;
 8002c56:	e005      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c58:	4b2c      	ldr	r3, [pc, #176]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ef      	bne.n	8002c44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d14a      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c70:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6892      	ldr	r2, [r2, #8]
 8002c80:	0211      	lsls	r1, r2, #8
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	0912      	lsrs	r2, r2, #4
 8002c88:	0452      	lsls	r2, r2, #17
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	491f      	ldr	r1, [pc, #124]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	614b      	str	r3, [r1, #20]
 8002c92:	e011      	b.n	8002cb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c94:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6892      	ldr	r2, [r2, #8]
 8002ca4:	0211      	lsls	r1, r2, #8
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6912      	ldr	r2, [r2, #16]
 8002caa:	0852      	lsrs	r2, r2, #1
 8002cac:	3a01      	subs	r2, #1
 8002cae:	0652      	lsls	r2, r2, #25
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	4916      	ldr	r1, [pc, #88]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cb8:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fa14 	bl	80010f0 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cca:	e009      	b.n	8002ce0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ccc:	f7fe fa10 	bl	80010f0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d902      	bls.n	8002ce0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cde:	e005      	b.n	8002cec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ef      	beq.n	8002ccc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4904      	ldr	r1, [pc, #16]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e040      	b.n	8002da4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe f86e 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	@ 0x24
 8002d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fb6a 	bl	8003430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8af 	bl	8002ec0 <UART_SetConfig>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e01b      	b.n	8002da4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fbe9 	bl	8003574 <UART_CheckIdleState>
 8002da2:	4603      	mov	r3, r0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d177      	bne.n	8002eb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_UART_Transmit+0x24>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e070      	b.n	8002eb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2221      	movs	r2, #33	@ 0x21
 8002de0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de2:	f7fe f985 	bl	80010f0 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e00:	d108      	bne.n	8002e14 <HAL_UART_Transmit+0x68>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d104      	bne.n	8002e14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e003      	b.n	8002e1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e1c:	e02f      	b.n	8002e7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	2180      	movs	r1, #128	@ 0x80
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fc4b 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e03b      	b.n	8002eb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e50:	b292      	uxth	r2, r2
 8002e52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	3302      	adds	r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e007      	b.n	8002e6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1c9      	bne.n	8002e1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fc15 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e005      	b.n	8002eb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec4:	b08a      	sub	sp, #40	@ 0x28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4ba4      	ldr	r3, [pc, #656]	@ (8003180 <UART_SetConfig+0x2c0>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a99      	ldr	r2, [pc, #612]	@ (8003184 <UART_SetConfig+0x2c4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a90      	ldr	r2, [pc, #576]	@ (8003188 <UART_SetConfig+0x2c8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d126      	bne.n	8002f98 <UART_SetConfig+0xd8>
 8002f4a:	4b90      	ldr	r3, [pc, #576]	@ (800318c <UART_SetConfig+0x2cc>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d81b      	bhi.n	8002f90 <UART_SetConfig+0xd0>
 8002f58:	a201      	add	r2, pc, #4	@ (adr r2, 8002f60 <UART_SetConfig+0xa0>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f81 	.word	0x08002f81
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f89 	.word	0x08002f89
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f76:	e116      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7e:	e112      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8002f80:	2304      	movs	r3, #4
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f86:	e10e      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8002f88:	2308      	movs	r3, #8
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8e:	e10a      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8002f90:	2310      	movs	r3, #16
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f96:	e106      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a7c      	ldr	r2, [pc, #496]	@ (8003190 <UART_SetConfig+0x2d0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d138      	bne.n	8003014 <UART_SetConfig+0x154>
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800318c <UART_SetConfig+0x2cc>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d82d      	bhi.n	800300c <UART_SetConfig+0x14c>
 8002fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <UART_SetConfig+0xf8>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fed 	.word	0x08002fed
 8002fbc:	0800300d 	.word	0x0800300d
 8002fc0:	0800300d 	.word	0x0800300d
 8002fc4:	0800300d 	.word	0x0800300d
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	0800300d 	.word	0x0800300d
 8002fd0:	0800300d 	.word	0x0800300d
 8002fd4:	0800300d 	.word	0x0800300d
 8002fd8:	08002ff5 	.word	0x08002ff5
 8002fdc:	0800300d 	.word	0x0800300d
 8002fe0:	0800300d 	.word	0x0800300d
 8002fe4:	0800300d 	.word	0x0800300d
 8002fe8:	08003005 	.word	0x08003005
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff2:	e0d8      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffa:	e0d4      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003002:	e0d0      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003004:	2308      	movs	r3, #8
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300a:	e0cc      	b.n	80031a6 <UART_SetConfig+0x2e6>
 800300c:	2310      	movs	r3, #16
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003012:	e0c8      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5e      	ldr	r2, [pc, #376]	@ (8003194 <UART_SetConfig+0x2d4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d125      	bne.n	800306a <UART_SetConfig+0x1aa>
 800301e:	4b5b      	ldr	r3, [pc, #364]	@ (800318c <UART_SetConfig+0x2cc>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003024:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003028:	2b30      	cmp	r3, #48	@ 0x30
 800302a:	d016      	beq.n	800305a <UART_SetConfig+0x19a>
 800302c:	2b30      	cmp	r3, #48	@ 0x30
 800302e:	d818      	bhi.n	8003062 <UART_SetConfig+0x1a2>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d00a      	beq.n	800304a <UART_SetConfig+0x18a>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d814      	bhi.n	8003062 <UART_SetConfig+0x1a2>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <UART_SetConfig+0x182>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d008      	beq.n	8003052 <UART_SetConfig+0x192>
 8003040:	e00f      	b.n	8003062 <UART_SetConfig+0x1a2>
 8003042:	2300      	movs	r3, #0
 8003044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003048:	e0ad      	b.n	80031a6 <UART_SetConfig+0x2e6>
 800304a:	2302      	movs	r3, #2
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003050:	e0a9      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003052:	2304      	movs	r3, #4
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003058:	e0a5      	b.n	80031a6 <UART_SetConfig+0x2e6>
 800305a:	2308      	movs	r3, #8
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003060:	e0a1      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003062:	2310      	movs	r3, #16
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003068:	e09d      	b.n	80031a6 <UART_SetConfig+0x2e6>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <UART_SetConfig+0x2d8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d125      	bne.n	80030c0 <UART_SetConfig+0x200>
 8003074:	4b45      	ldr	r3, [pc, #276]	@ (800318c <UART_SetConfig+0x2cc>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800307e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003080:	d016      	beq.n	80030b0 <UART_SetConfig+0x1f0>
 8003082:	2bc0      	cmp	r3, #192	@ 0xc0
 8003084:	d818      	bhi.n	80030b8 <UART_SetConfig+0x1f8>
 8003086:	2b80      	cmp	r3, #128	@ 0x80
 8003088:	d00a      	beq.n	80030a0 <UART_SetConfig+0x1e0>
 800308a:	2b80      	cmp	r3, #128	@ 0x80
 800308c:	d814      	bhi.n	80030b8 <UART_SetConfig+0x1f8>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <UART_SetConfig+0x1d8>
 8003092:	2b40      	cmp	r3, #64	@ 0x40
 8003094:	d008      	beq.n	80030a8 <UART_SetConfig+0x1e8>
 8003096:	e00f      	b.n	80030b8 <UART_SetConfig+0x1f8>
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e082      	b.n	80031a6 <UART_SetConfig+0x2e6>
 80030a0:	2302      	movs	r3, #2
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a6:	e07e      	b.n	80031a6 <UART_SetConfig+0x2e6>
 80030a8:	2304      	movs	r3, #4
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e07a      	b.n	80031a6 <UART_SetConfig+0x2e6>
 80030b0:	2308      	movs	r3, #8
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e076      	b.n	80031a6 <UART_SetConfig+0x2e6>
 80030b8:	2310      	movs	r3, #16
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030be:	e072      	b.n	80031a6 <UART_SetConfig+0x2e6>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a35      	ldr	r2, [pc, #212]	@ (800319c <UART_SetConfig+0x2dc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d12a      	bne.n	8003120 <UART_SetConfig+0x260>
 80030ca:	4b30      	ldr	r3, [pc, #192]	@ (800318c <UART_SetConfig+0x2cc>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d8:	d01a      	beq.n	8003110 <UART_SetConfig+0x250>
 80030da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030de:	d81b      	bhi.n	8003118 <UART_SetConfig+0x258>
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e4:	d00c      	beq.n	8003100 <UART_SetConfig+0x240>
 80030e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ea:	d815      	bhi.n	8003118 <UART_SetConfig+0x258>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <UART_SetConfig+0x238>
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f4:	d008      	beq.n	8003108 <UART_SetConfig+0x248>
 80030f6:	e00f      	b.n	8003118 <UART_SetConfig+0x258>
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fe:	e052      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003100:	2302      	movs	r3, #2
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003106:	e04e      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003108:	2304      	movs	r3, #4
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310e:	e04a      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003110:	2308      	movs	r3, #8
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003116:	e046      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003118:	2310      	movs	r3, #16
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311e:	e042      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <UART_SetConfig+0x2c4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d13a      	bne.n	80031a0 <UART_SetConfig+0x2e0>
 800312a:	4b18      	ldr	r3, [pc, #96]	@ (800318c <UART_SetConfig+0x2cc>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003134:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003138:	d01a      	beq.n	8003170 <UART_SetConfig+0x2b0>
 800313a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800313e:	d81b      	bhi.n	8003178 <UART_SetConfig+0x2b8>
 8003140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003144:	d00c      	beq.n	8003160 <UART_SetConfig+0x2a0>
 8003146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800314a:	d815      	bhi.n	8003178 <UART_SetConfig+0x2b8>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <UART_SetConfig+0x298>
 8003150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003154:	d008      	beq.n	8003168 <UART_SetConfig+0x2a8>
 8003156:	e00f      	b.n	8003178 <UART_SetConfig+0x2b8>
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315e:	e022      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003160:	2302      	movs	r3, #2
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003166:	e01e      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e01a      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e016      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e012      	b.n	80031a6 <UART_SetConfig+0x2e6>
 8003180:	efff69f3 	.word	0xefff69f3
 8003184:	40008000 	.word	0x40008000
 8003188:	40013800 	.word	0x40013800
 800318c:	40021000 	.word	0x40021000
 8003190:	40004400 	.word	0x40004400
 8003194:	40004800 	.word	0x40004800
 8003198:	40004c00 	.word	0x40004c00
 800319c:	40005000 	.word	0x40005000
 80031a0:	2310      	movs	r3, #16
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a9f      	ldr	r2, [pc, #636]	@ (8003428 <UART_SetConfig+0x568>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d17a      	bne.n	80032a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d824      	bhi.n	8003202 <UART_SetConfig+0x342>
 80031b8:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <UART_SetConfig+0x300>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	08003203 	.word	0x08003203
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	08003203 	.word	0x08003203
 80031d0:	080031f3 	.word	0x080031f3
 80031d4:	08003203 	.word	0x08003203
 80031d8:	08003203 	.word	0x08003203
 80031dc:	08003203 	.word	0x08003203
 80031e0:	080031fb 	.word	0x080031fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7ff f84c 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 80031e8:	61f8      	str	r0, [r7, #28]
        break;
 80031ea:	e010      	b.n	800320e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ec:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <UART_SetConfig+0x56c>)
 80031ee:	61fb      	str	r3, [r7, #28]
        break;
 80031f0:	e00d      	b.n	800320e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f2:	f7fe ffad 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80031f6:	61f8      	str	r0, [r7, #28]
        break;
 80031f8:	e009      	b.n	800320e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fe:	61fb      	str	r3, [r7, #28]
        break;
 8003200:	e005      	b.n	800320e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800320c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80fb 	beq.w	800340c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	429a      	cmp	r2, r3
 8003224:	d305      	bcc.n	8003232 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	429a      	cmp	r2, r3
 8003230:	d903      	bls.n	800323a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003238:	e0e8      	b.n	800340c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2200      	movs	r2, #0
 800323e:	461c      	mov	r4, r3
 8003240:	4615      	mov	r5, r2
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	022b      	lsls	r3, r5, #8
 800324c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003250:	0222      	lsls	r2, r4, #8
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	6849      	ldr	r1, [r1, #4]
 8003256:	0849      	lsrs	r1, r1, #1
 8003258:	2000      	movs	r0, #0
 800325a:	4688      	mov	r8, r1
 800325c:	4681      	mov	r9, r0
 800325e:	eb12 0a08 	adds.w	sl, r2, r8
 8003262:	eb43 0b09 	adc.w	fp, r3, r9
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003274:	4650      	mov	r0, sl
 8003276:	4659      	mov	r1, fp
 8003278:	f7fd f9be 	bl	80005f8 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800328a:	d308      	bcc.n	800329e <UART_SetConfig+0x3de>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003292:	d204      	bcs.n	800329e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	e0b6      	b.n	800340c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032a4:	e0b2      	b.n	800340c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ae:	d15e      	bne.n	800336e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d828      	bhi.n	800330a <UART_SetConfig+0x44a>
 80032b8:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <UART_SetConfig+0x400>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080032ed 	.word	0x080032ed
 80032c8:	080032f5 	.word	0x080032f5
 80032cc:	0800330b 	.word	0x0800330b
 80032d0:	080032fb 	.word	0x080032fb
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	0800330b 	.word	0x0800330b
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	08003303 	.word	0x08003303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7fe ffcc 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 80032e8:	61f8      	str	r0, [r7, #28]
        break;
 80032ea:	e014      	b.n	8003316 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ec:	f7fe ffde 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 80032f0:	61f8      	str	r0, [r7, #28]
        break;
 80032f2:	e010      	b.n	8003316 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f4:	4b4d      	ldr	r3, [pc, #308]	@ (800342c <UART_SetConfig+0x56c>)
 80032f6:	61fb      	str	r3, [r7, #28]
        break;
 80032f8:	e00d      	b.n	8003316 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fa:	f7fe ff29 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80032fe:	61f8      	str	r0, [r7, #28]
        break;
 8003300:	e009      	b.n	8003316 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	61fb      	str	r3, [r7, #28]
        break;
 8003308:	e005      	b.n	8003316 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d077      	beq.n	800340c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005a      	lsls	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d916      	bls.n	8003366 <UART_SetConfig+0x4a6>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333e:	d212      	bcs.n	8003366 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f023 030f 	bic.w	r3, r3, #15
 8003348:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	b29b      	uxth	r3, r3
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	b29a      	uxth	r2, r3
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	4313      	orrs	r3, r2
 800335a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	8afa      	ldrh	r2, [r7, #22]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e052      	b.n	800340c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800336c:	e04e      	b.n	800340c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800336e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003372:	2b08      	cmp	r3, #8
 8003374:	d827      	bhi.n	80033c6 <UART_SetConfig+0x506>
 8003376:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <UART_SetConfig+0x4bc>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033a9 	.word	0x080033a9
 8003384:	080033b1 	.word	0x080033b1
 8003388:	080033c7 	.word	0x080033c7
 800338c:	080033b7 	.word	0x080033b7
 8003390:	080033c7 	.word	0x080033c7
 8003394:	080033c7 	.word	0x080033c7
 8003398:	080033c7 	.word	0x080033c7
 800339c:	080033bf 	.word	0x080033bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a0:	f7fe ff6e 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 80033a4:	61f8      	str	r0, [r7, #28]
        break;
 80033a6:	e014      	b.n	80033d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7fe ff80 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 80033ac:	61f8      	str	r0, [r7, #28]
        break;
 80033ae:	e010      	b.n	80033d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b0:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <UART_SetConfig+0x56c>)
 80033b2:	61fb      	str	r3, [r7, #28]
        break;
 80033b4:	e00d      	b.n	80033d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b6:	f7fe fecb 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80033ba:	61f8      	str	r0, [r7, #28]
        break;
 80033bc:	e009      	b.n	80033d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c2:	61fb      	str	r3, [r7, #28]
        break;
 80033c4:	e005      	b.n	80033d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033d0:	bf00      	nop
    }

    if (pclk != 0U)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d019      	beq.n	800340c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	085a      	lsrs	r2, r3, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	441a      	add	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d909      	bls.n	8003406 <UART_SetConfig+0x546>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d205      	bcs.n	8003406 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e002      	b.n	800340c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003418:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800341c:	4618      	mov	r0, r3
 800341e:	3728      	adds	r7, #40	@ 0x28
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	40008000 	.word	0x40008000
 800342c:	00f42400 	.word	0x00f42400

08003430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01a      	beq.n	8003546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352e:	d10a      	bne.n	8003546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b098      	sub	sp, #96	@ 0x60
 8003578:	af02      	add	r7, sp, #8
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003584:	f7fd fdb4 	bl	80010f0 <HAL_GetTick>
 8003588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d12e      	bne.n	80035f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a0:	2200      	movs	r2, #0
 80035a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f88c 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d021      	beq.n	80035f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e6      	bne.n	80035b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e062      	b.n	80036bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d149      	bne.n	8003698 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f856 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03c      	beq.n	8003698 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	623b      	str	r3, [r7, #32]
   return(result);
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
 800363e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e6      	bne.n	800361e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003670:	61fa      	str	r2, [r7, #28]
 8003672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	617b      	str	r3, [r7, #20]
   return(result);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e011      	b.n	80036bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3758      	adds	r7, #88	@ 0x58
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d4:	e04f      	b.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d04b      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fd fd07 	bl	80010f0 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e04e      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d037      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b80      	cmp	r3, #128	@ 0x80
 800370a:	d034      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b40      	cmp	r3, #64	@ 0x40
 8003710:	d031      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d110      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2208      	movs	r2, #8
 8003726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f838 	bl	800379e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2208      	movs	r2, #8
 8003732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e029      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800374c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003750:	d111      	bne.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800375a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f81e 	bl	800379e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e00f      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d0a0      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800379e:	b480      	push	{r7}
 80037a0:	b095      	sub	sp, #84	@ 0x54
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e6      	bne.n	80037a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003810:	2b01      	cmp	r3, #1
 8003812:	d118      	bne.n	8003846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	60bb      	str	r3, [r7, #8]
   return(result);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	647b      	str	r3, [r7, #68]	@ 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	613b      	str	r3, [r7, #16]
   return(result);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e6      	bne.n	8003814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800385a:	bf00      	nop
 800385c:	3754      	adds	r7, #84	@ 0x54
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <siprintf>:
 8003868:	b40e      	push	{r1, r2, r3}
 800386a:	b510      	push	{r4, lr}
 800386c:	b09d      	sub	sp, #116	@ 0x74
 800386e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003870:	9002      	str	r0, [sp, #8]
 8003872:	9006      	str	r0, [sp, #24]
 8003874:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003878:	480a      	ldr	r0, [pc, #40]	@ (80038a4 <siprintf+0x3c>)
 800387a:	9107      	str	r1, [sp, #28]
 800387c:	9104      	str	r1, [sp, #16]
 800387e:	490a      	ldr	r1, [pc, #40]	@ (80038a8 <siprintf+0x40>)
 8003880:	f853 2b04 	ldr.w	r2, [r3], #4
 8003884:	9105      	str	r1, [sp, #20]
 8003886:	2400      	movs	r4, #0
 8003888:	a902      	add	r1, sp, #8
 800388a:	6800      	ldr	r0, [r0, #0]
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003890:	f000 f994 	bl	8003bbc <_svfiprintf_r>
 8003894:	9b02      	ldr	r3, [sp, #8]
 8003896:	701c      	strb	r4, [r3, #0]
 8003898:	b01d      	add	sp, #116	@ 0x74
 800389a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800389e:	b003      	add	sp, #12
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	2000000c 	.word	0x2000000c
 80038a8:	ffff0208 	.word	0xffff0208

080038ac <memset>:
 80038ac:	4402      	add	r2, r0
 80038ae:	4603      	mov	r3, r0
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d100      	bne.n	80038b6 <memset+0xa>
 80038b4:	4770      	bx	lr
 80038b6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ba:	e7f9      	b.n	80038b0 <memset+0x4>

080038bc <__errno>:
 80038bc:	4b01      	ldr	r3, [pc, #4]	@ (80038c4 <__errno+0x8>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	2000000c 	.word	0x2000000c

080038c8 <__libc_init_array>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003900 <__libc_init_array+0x38>)
 80038cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003904 <__libc_init_array+0x3c>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	2600      	movs	r6, #0
 80038d4:	42a6      	cmp	r6, r4
 80038d6:	d109      	bne.n	80038ec <__libc_init_array+0x24>
 80038d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003908 <__libc_init_array+0x40>)
 80038da:	4c0c      	ldr	r4, [pc, #48]	@ (800390c <__libc_init_array+0x44>)
 80038dc:	f000 fc64 	bl	80041a8 <_init>
 80038e0:	1b64      	subs	r4, r4, r5
 80038e2:	10a4      	asrs	r4, r4, #2
 80038e4:	2600      	movs	r6, #0
 80038e6:	42a6      	cmp	r6, r4
 80038e8:	d105      	bne.n	80038f6 <__libc_init_array+0x2e>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f0:	4798      	blx	r3
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7ee      	b.n	80038d4 <__libc_init_array+0xc>
 80038f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fa:	4798      	blx	r3
 80038fc:	3601      	adds	r6, #1
 80038fe:	e7f2      	b.n	80038e6 <__libc_init_array+0x1e>
 8003900:	0800425c 	.word	0x0800425c
 8003904:	0800425c 	.word	0x0800425c
 8003908:	0800425c 	.word	0x0800425c
 800390c:	08004260 	.word	0x08004260

08003910 <__retarget_lock_acquire_recursive>:
 8003910:	4770      	bx	lr

08003912 <__retarget_lock_release_recursive>:
 8003912:	4770      	bx	lr

08003914 <_free_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	2900      	cmp	r1, #0
 800391a:	d041      	beq.n	80039a0 <_free_r+0x8c>
 800391c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003920:	1f0c      	subs	r4, r1, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	bfb8      	it	lt
 8003926:	18e4      	addlt	r4, r4, r3
 8003928:	f000 f8e0 	bl	8003aec <__malloc_lock>
 800392c:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <_free_r+0x90>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	b933      	cbnz	r3, 8003940 <_free_r+0x2c>
 8003932:	6063      	str	r3, [r4, #4]
 8003934:	6014      	str	r4, [r2, #0]
 8003936:	4628      	mov	r0, r5
 8003938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800393c:	f000 b8dc 	b.w	8003af8 <__malloc_unlock>
 8003940:	42a3      	cmp	r3, r4
 8003942:	d908      	bls.n	8003956 <_free_r+0x42>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	1821      	adds	r1, r4, r0
 8003948:	428b      	cmp	r3, r1
 800394a:	bf01      	itttt	eq
 800394c:	6819      	ldreq	r1, [r3, #0]
 800394e:	685b      	ldreq	r3, [r3, #4]
 8003950:	1809      	addeq	r1, r1, r0
 8003952:	6021      	streq	r1, [r4, #0]
 8003954:	e7ed      	b.n	8003932 <_free_r+0x1e>
 8003956:	461a      	mov	r2, r3
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b10b      	cbz	r3, 8003960 <_free_r+0x4c>
 800395c:	42a3      	cmp	r3, r4
 800395e:	d9fa      	bls.n	8003956 <_free_r+0x42>
 8003960:	6811      	ldr	r1, [r2, #0]
 8003962:	1850      	adds	r0, r2, r1
 8003964:	42a0      	cmp	r0, r4
 8003966:	d10b      	bne.n	8003980 <_free_r+0x6c>
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	4401      	add	r1, r0
 800396c:	1850      	adds	r0, r2, r1
 800396e:	4283      	cmp	r3, r0
 8003970:	6011      	str	r1, [r2, #0]
 8003972:	d1e0      	bne.n	8003936 <_free_r+0x22>
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	6053      	str	r3, [r2, #4]
 800397a:	4408      	add	r0, r1
 800397c:	6010      	str	r0, [r2, #0]
 800397e:	e7da      	b.n	8003936 <_free_r+0x22>
 8003980:	d902      	bls.n	8003988 <_free_r+0x74>
 8003982:	230c      	movs	r3, #12
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	e7d6      	b.n	8003936 <_free_r+0x22>
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	1821      	adds	r1, r4, r0
 800398c:	428b      	cmp	r3, r1
 800398e:	bf04      	itt	eq
 8003990:	6819      	ldreq	r1, [r3, #0]
 8003992:	685b      	ldreq	r3, [r3, #4]
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	bf04      	itt	eq
 8003998:	1809      	addeq	r1, r1, r0
 800399a:	6021      	streq	r1, [r4, #0]
 800399c:	6054      	str	r4, [r2, #4]
 800399e:	e7ca      	b.n	8003936 <_free_r+0x22>
 80039a0:	bd38      	pop	{r3, r4, r5, pc}
 80039a2:	bf00      	nop
 80039a4:	2000024c 	.word	0x2000024c

080039a8 <sbrk_aligned>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4e0f      	ldr	r6, [pc, #60]	@ (80039e8 <sbrk_aligned+0x40>)
 80039ac:	460c      	mov	r4, r1
 80039ae:	6831      	ldr	r1, [r6, #0]
 80039b0:	4605      	mov	r5, r0
 80039b2:	b911      	cbnz	r1, 80039ba <sbrk_aligned+0x12>
 80039b4:	f000 fba4 	bl	8004100 <_sbrk_r>
 80039b8:	6030      	str	r0, [r6, #0]
 80039ba:	4621      	mov	r1, r4
 80039bc:	4628      	mov	r0, r5
 80039be:	f000 fb9f 	bl	8004100 <_sbrk_r>
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	d103      	bne.n	80039ce <sbrk_aligned+0x26>
 80039c6:	f04f 34ff 	mov.w	r4, #4294967295
 80039ca:	4620      	mov	r0, r4
 80039cc:	bd70      	pop	{r4, r5, r6, pc}
 80039ce:	1cc4      	adds	r4, r0, #3
 80039d0:	f024 0403 	bic.w	r4, r4, #3
 80039d4:	42a0      	cmp	r0, r4
 80039d6:	d0f8      	beq.n	80039ca <sbrk_aligned+0x22>
 80039d8:	1a21      	subs	r1, r4, r0
 80039da:	4628      	mov	r0, r5
 80039dc:	f000 fb90 	bl	8004100 <_sbrk_r>
 80039e0:	3001      	adds	r0, #1
 80039e2:	d1f2      	bne.n	80039ca <sbrk_aligned+0x22>
 80039e4:	e7ef      	b.n	80039c6 <sbrk_aligned+0x1e>
 80039e6:	bf00      	nop
 80039e8:	20000248 	.word	0x20000248

080039ec <_malloc_r>:
 80039ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f0:	1ccd      	adds	r5, r1, #3
 80039f2:	f025 0503 	bic.w	r5, r5, #3
 80039f6:	3508      	adds	r5, #8
 80039f8:	2d0c      	cmp	r5, #12
 80039fa:	bf38      	it	cc
 80039fc:	250c      	movcc	r5, #12
 80039fe:	2d00      	cmp	r5, #0
 8003a00:	4606      	mov	r6, r0
 8003a02:	db01      	blt.n	8003a08 <_malloc_r+0x1c>
 8003a04:	42a9      	cmp	r1, r5
 8003a06:	d904      	bls.n	8003a12 <_malloc_r+0x26>
 8003a08:	230c      	movs	r3, #12
 8003a0a:	6033      	str	r3, [r6, #0]
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ae8 <_malloc_r+0xfc>
 8003a16:	f000 f869 	bl	8003aec <__malloc_lock>
 8003a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a1e:	461c      	mov	r4, r3
 8003a20:	bb44      	cbnz	r4, 8003a74 <_malloc_r+0x88>
 8003a22:	4629      	mov	r1, r5
 8003a24:	4630      	mov	r0, r6
 8003a26:	f7ff ffbf 	bl	80039a8 <sbrk_aligned>
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	d158      	bne.n	8003ae2 <_malloc_r+0xf6>
 8003a30:	f8d8 4000 	ldr.w	r4, [r8]
 8003a34:	4627      	mov	r7, r4
 8003a36:	2f00      	cmp	r7, #0
 8003a38:	d143      	bne.n	8003ac2 <_malloc_r+0xd6>
 8003a3a:	2c00      	cmp	r4, #0
 8003a3c:	d04b      	beq.n	8003ad6 <_malloc_r+0xea>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	4639      	mov	r1, r7
 8003a42:	4630      	mov	r0, r6
 8003a44:	eb04 0903 	add.w	r9, r4, r3
 8003a48:	f000 fb5a 	bl	8004100 <_sbrk_r>
 8003a4c:	4581      	cmp	r9, r0
 8003a4e:	d142      	bne.n	8003ad6 <_malloc_r+0xea>
 8003a50:	6821      	ldr	r1, [r4, #0]
 8003a52:	1a6d      	subs	r5, r5, r1
 8003a54:	4629      	mov	r1, r5
 8003a56:	4630      	mov	r0, r6
 8003a58:	f7ff ffa6 	bl	80039a8 <sbrk_aligned>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d03a      	beq.n	8003ad6 <_malloc_r+0xea>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	442b      	add	r3, r5
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	f8d8 3000 	ldr.w	r3, [r8]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	bb62      	cbnz	r2, 8003ac8 <_malloc_r+0xdc>
 8003a6e:	f8c8 7000 	str.w	r7, [r8]
 8003a72:	e00f      	b.n	8003a94 <_malloc_r+0xa8>
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	1b52      	subs	r2, r2, r5
 8003a78:	d420      	bmi.n	8003abc <_malloc_r+0xd0>
 8003a7a:	2a0b      	cmp	r2, #11
 8003a7c:	d917      	bls.n	8003aae <_malloc_r+0xc2>
 8003a7e:	1961      	adds	r1, r4, r5
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	6025      	str	r5, [r4, #0]
 8003a84:	bf18      	it	ne
 8003a86:	6059      	strne	r1, [r3, #4]
 8003a88:	6863      	ldr	r3, [r4, #4]
 8003a8a:	bf08      	it	eq
 8003a8c:	f8c8 1000 	streq.w	r1, [r8]
 8003a90:	5162      	str	r2, [r4, r5]
 8003a92:	604b      	str	r3, [r1, #4]
 8003a94:	4630      	mov	r0, r6
 8003a96:	f000 f82f 	bl	8003af8 <__malloc_unlock>
 8003a9a:	f104 000b 	add.w	r0, r4, #11
 8003a9e:	1d23      	adds	r3, r4, #4
 8003aa0:	f020 0007 	bic.w	r0, r0, #7
 8003aa4:	1ac2      	subs	r2, r0, r3
 8003aa6:	bf1c      	itt	ne
 8003aa8:	1a1b      	subne	r3, r3, r0
 8003aaa:	50a3      	strne	r3, [r4, r2]
 8003aac:	e7af      	b.n	8003a0e <_malloc_r+0x22>
 8003aae:	6862      	ldr	r2, [r4, #4]
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	bf0c      	ite	eq
 8003ab4:	f8c8 2000 	streq.w	r2, [r8]
 8003ab8:	605a      	strne	r2, [r3, #4]
 8003aba:	e7eb      	b.n	8003a94 <_malloc_r+0xa8>
 8003abc:	4623      	mov	r3, r4
 8003abe:	6864      	ldr	r4, [r4, #4]
 8003ac0:	e7ae      	b.n	8003a20 <_malloc_r+0x34>
 8003ac2:	463c      	mov	r4, r7
 8003ac4:	687f      	ldr	r7, [r7, #4]
 8003ac6:	e7b6      	b.n	8003a36 <_malloc_r+0x4a>
 8003ac8:	461a      	mov	r2, r3
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d1fb      	bne.n	8003ac8 <_malloc_r+0xdc>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6053      	str	r3, [r2, #4]
 8003ad4:	e7de      	b.n	8003a94 <_malloc_r+0xa8>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	4630      	mov	r0, r6
 8003adc:	f000 f80c 	bl	8003af8 <__malloc_unlock>
 8003ae0:	e794      	b.n	8003a0c <_malloc_r+0x20>
 8003ae2:	6005      	str	r5, [r0, #0]
 8003ae4:	e7d6      	b.n	8003a94 <_malloc_r+0xa8>
 8003ae6:	bf00      	nop
 8003ae8:	2000024c 	.word	0x2000024c

08003aec <__malloc_lock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	@ (8003af4 <__malloc_lock+0x8>)
 8003aee:	f7ff bf0f 	b.w	8003910 <__retarget_lock_acquire_recursive>
 8003af2:	bf00      	nop
 8003af4:	20000244 	.word	0x20000244

08003af8 <__malloc_unlock>:
 8003af8:	4801      	ldr	r0, [pc, #4]	@ (8003b00 <__malloc_unlock+0x8>)
 8003afa:	f7ff bf0a 	b.w	8003912 <__retarget_lock_release_recursive>
 8003afe:	bf00      	nop
 8003b00:	20000244 	.word	0x20000244

08003b04 <__ssputs_r>:
 8003b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	688e      	ldr	r6, [r1, #8]
 8003b0a:	461f      	mov	r7, r3
 8003b0c:	42be      	cmp	r6, r7
 8003b0e:	680b      	ldr	r3, [r1, #0]
 8003b10:	4682      	mov	sl, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	4690      	mov	r8, r2
 8003b16:	d82d      	bhi.n	8003b74 <__ssputs_r+0x70>
 8003b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b20:	d026      	beq.n	8003b70 <__ssputs_r+0x6c>
 8003b22:	6965      	ldr	r5, [r4, #20]
 8003b24:	6909      	ldr	r1, [r1, #16]
 8003b26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b2a:	eba3 0901 	sub.w	r9, r3, r1
 8003b2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b32:	1c7b      	adds	r3, r7, #1
 8003b34:	444b      	add	r3, r9
 8003b36:	106d      	asrs	r5, r5, #1
 8003b38:	429d      	cmp	r5, r3
 8003b3a:	bf38      	it	cc
 8003b3c:	461d      	movcc	r5, r3
 8003b3e:	0553      	lsls	r3, r2, #21
 8003b40:	d527      	bpl.n	8003b92 <__ssputs_r+0x8e>
 8003b42:	4629      	mov	r1, r5
 8003b44:	f7ff ff52 	bl	80039ec <_malloc_r>
 8003b48:	4606      	mov	r6, r0
 8003b4a:	b360      	cbz	r0, 8003ba6 <__ssputs_r+0xa2>
 8003b4c:	6921      	ldr	r1, [r4, #16]
 8003b4e:	464a      	mov	r2, r9
 8003b50:	f000 fae6 	bl	8004120 <memcpy>
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b5e:	81a3      	strh	r3, [r4, #12]
 8003b60:	6126      	str	r6, [r4, #16]
 8003b62:	6165      	str	r5, [r4, #20]
 8003b64:	444e      	add	r6, r9
 8003b66:	eba5 0509 	sub.w	r5, r5, r9
 8003b6a:	6026      	str	r6, [r4, #0]
 8003b6c:	60a5      	str	r5, [r4, #8]
 8003b6e:	463e      	mov	r6, r7
 8003b70:	42be      	cmp	r6, r7
 8003b72:	d900      	bls.n	8003b76 <__ssputs_r+0x72>
 8003b74:	463e      	mov	r6, r7
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	4632      	mov	r2, r6
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	f000 faa6 	bl	80040cc <memmove>
 8003b80:	68a3      	ldr	r3, [r4, #8]
 8003b82:	1b9b      	subs	r3, r3, r6
 8003b84:	60a3      	str	r3, [r4, #8]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	4433      	add	r3, r6
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b92:	462a      	mov	r2, r5
 8003b94:	f000 fad2 	bl	800413c <_realloc_r>
 8003b98:	4606      	mov	r6, r0
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d1e0      	bne.n	8003b60 <__ssputs_r+0x5c>
 8003b9e:	6921      	ldr	r1, [r4, #16]
 8003ba0:	4650      	mov	r0, sl
 8003ba2:	f7ff feb7 	bl	8003914 <_free_r>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	f8ca 3000 	str.w	r3, [sl]
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	e7e9      	b.n	8003b8e <__ssputs_r+0x8a>
	...

08003bbc <_svfiprintf_r>:
 8003bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc0:	4698      	mov	r8, r3
 8003bc2:	898b      	ldrh	r3, [r1, #12]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	b09d      	sub	sp, #116	@ 0x74
 8003bc8:	4607      	mov	r7, r0
 8003bca:	460d      	mov	r5, r1
 8003bcc:	4614      	mov	r4, r2
 8003bce:	d510      	bpl.n	8003bf2 <_svfiprintf_r+0x36>
 8003bd0:	690b      	ldr	r3, [r1, #16]
 8003bd2:	b973      	cbnz	r3, 8003bf2 <_svfiprintf_r+0x36>
 8003bd4:	2140      	movs	r1, #64	@ 0x40
 8003bd6:	f7ff ff09 	bl	80039ec <_malloc_r>
 8003bda:	6028      	str	r0, [r5, #0]
 8003bdc:	6128      	str	r0, [r5, #16]
 8003bde:	b930      	cbnz	r0, 8003bee <_svfiprintf_r+0x32>
 8003be0:	230c      	movs	r3, #12
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	b01d      	add	sp, #116	@ 0x74
 8003bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bee:	2340      	movs	r3, #64	@ 0x40
 8003bf0:	616b      	str	r3, [r5, #20]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c00:	2330      	movs	r3, #48	@ 0x30
 8003c02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003da0 <_svfiprintf_r+0x1e4>
 8003c06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c0a:	f04f 0901 	mov.w	r9, #1
 8003c0e:	4623      	mov	r3, r4
 8003c10:	469a      	mov	sl, r3
 8003c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c16:	b10a      	cbz	r2, 8003c1c <_svfiprintf_r+0x60>
 8003c18:	2a25      	cmp	r2, #37	@ 0x25
 8003c1a:	d1f9      	bne.n	8003c10 <_svfiprintf_r+0x54>
 8003c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c20:	d00b      	beq.n	8003c3a <_svfiprintf_r+0x7e>
 8003c22:	465b      	mov	r3, fp
 8003c24:	4622      	mov	r2, r4
 8003c26:	4629      	mov	r1, r5
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f7ff ff6b 	bl	8003b04 <__ssputs_r>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f000 80a7 	beq.w	8003d82 <_svfiprintf_r+0x1c6>
 8003c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c36:	445a      	add	r2, fp
 8003c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 809f 	beq.w	8003d82 <_svfiprintf_r+0x1c6>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4e:	f10a 0a01 	add.w	sl, sl, #1
 8003c52:	9304      	str	r3, [sp, #16]
 8003c54:	9307      	str	r3, [sp, #28]
 8003c56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c5c:	4654      	mov	r4, sl
 8003c5e:	2205      	movs	r2, #5
 8003c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c64:	484e      	ldr	r0, [pc, #312]	@ (8003da0 <_svfiprintf_r+0x1e4>)
 8003c66:	f7fc fabb 	bl	80001e0 <memchr>
 8003c6a:	9a04      	ldr	r2, [sp, #16]
 8003c6c:	b9d8      	cbnz	r0, 8003ca6 <_svfiprintf_r+0xea>
 8003c6e:	06d0      	lsls	r0, r2, #27
 8003c70:	bf44      	itt	mi
 8003c72:	2320      	movmi	r3, #32
 8003c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c78:	0711      	lsls	r1, r2, #28
 8003c7a:	bf44      	itt	mi
 8003c7c:	232b      	movmi	r3, #43	@ 0x2b
 8003c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c82:	f89a 3000 	ldrb.w	r3, [sl]
 8003c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c88:	d015      	beq.n	8003cb6 <_svfiprintf_r+0xfa>
 8003c8a:	9a07      	ldr	r2, [sp, #28]
 8003c8c:	4654      	mov	r4, sl
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f04f 0c0a 	mov.w	ip, #10
 8003c94:	4621      	mov	r1, r4
 8003c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c9a:	3b30      	subs	r3, #48	@ 0x30
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d94b      	bls.n	8003d38 <_svfiprintf_r+0x17c>
 8003ca0:	b1b0      	cbz	r0, 8003cd0 <_svfiprintf_r+0x114>
 8003ca2:	9207      	str	r2, [sp, #28]
 8003ca4:	e014      	b.n	8003cd0 <_svfiprintf_r+0x114>
 8003ca6:	eba0 0308 	sub.w	r3, r0, r8
 8003caa:	fa09 f303 	lsl.w	r3, r9, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	9304      	str	r3, [sp, #16]
 8003cb2:	46a2      	mov	sl, r4
 8003cb4:	e7d2      	b.n	8003c5c <_svfiprintf_r+0xa0>
 8003cb6:	9b03      	ldr	r3, [sp, #12]
 8003cb8:	1d19      	adds	r1, r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	9103      	str	r1, [sp, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bfbb      	ittet	lt
 8003cc2:	425b      	neglt	r3, r3
 8003cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8003cc8:	9307      	strge	r3, [sp, #28]
 8003cca:	9307      	strlt	r3, [sp, #28]
 8003ccc:	bfb8      	it	lt
 8003cce:	9204      	strlt	r2, [sp, #16]
 8003cd0:	7823      	ldrb	r3, [r4, #0]
 8003cd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cd4:	d10a      	bne.n	8003cec <_svfiprintf_r+0x130>
 8003cd6:	7863      	ldrb	r3, [r4, #1]
 8003cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cda:	d132      	bne.n	8003d42 <_svfiprintf_r+0x186>
 8003cdc:	9b03      	ldr	r3, [sp, #12]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	9203      	str	r2, [sp, #12]
 8003ce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ce8:	3402      	adds	r4, #2
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003db0 <_svfiprintf_r+0x1f4>
 8003cf0:	7821      	ldrb	r1, [r4, #0]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	4650      	mov	r0, sl
 8003cf6:	f7fc fa73 	bl	80001e0 <memchr>
 8003cfa:	b138      	cbz	r0, 8003d0c <_svfiprintf_r+0x150>
 8003cfc:	9b04      	ldr	r3, [sp, #16]
 8003cfe:	eba0 000a 	sub.w	r0, r0, sl
 8003d02:	2240      	movs	r2, #64	@ 0x40
 8003d04:	4082      	lsls	r2, r0
 8003d06:	4313      	orrs	r3, r2
 8003d08:	3401      	adds	r4, #1
 8003d0a:	9304      	str	r3, [sp, #16]
 8003d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d10:	4824      	ldr	r0, [pc, #144]	@ (8003da4 <_svfiprintf_r+0x1e8>)
 8003d12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d16:	2206      	movs	r2, #6
 8003d18:	f7fc fa62 	bl	80001e0 <memchr>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d036      	beq.n	8003d8e <_svfiprintf_r+0x1d2>
 8003d20:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <_svfiprintf_r+0x1ec>)
 8003d22:	bb1b      	cbnz	r3, 8003d6c <_svfiprintf_r+0x1b0>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	3307      	adds	r3, #7
 8003d28:	f023 0307 	bic.w	r3, r3, #7
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d32:	4433      	add	r3, r6
 8003d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d36:	e76a      	b.n	8003c0e <_svfiprintf_r+0x52>
 8003d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	2001      	movs	r0, #1
 8003d40:	e7a8      	b.n	8003c94 <_svfiprintf_r+0xd8>
 8003d42:	2300      	movs	r3, #0
 8003d44:	3401      	adds	r4, #1
 8003d46:	9305      	str	r3, [sp, #20]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f04f 0c0a 	mov.w	ip, #10
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d54:	3a30      	subs	r2, #48	@ 0x30
 8003d56:	2a09      	cmp	r2, #9
 8003d58:	d903      	bls.n	8003d62 <_svfiprintf_r+0x1a6>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0c6      	beq.n	8003cec <_svfiprintf_r+0x130>
 8003d5e:	9105      	str	r1, [sp, #20]
 8003d60:	e7c4      	b.n	8003cec <_svfiprintf_r+0x130>
 8003d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d66:	4604      	mov	r4, r0
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e7f0      	b.n	8003d4e <_svfiprintf_r+0x192>
 8003d6c:	ab03      	add	r3, sp, #12
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	462a      	mov	r2, r5
 8003d72:	4b0e      	ldr	r3, [pc, #56]	@ (8003dac <_svfiprintf_r+0x1f0>)
 8003d74:	a904      	add	r1, sp, #16
 8003d76:	4638      	mov	r0, r7
 8003d78:	f3af 8000 	nop.w
 8003d7c:	1c42      	adds	r2, r0, #1
 8003d7e:	4606      	mov	r6, r0
 8003d80:	d1d6      	bne.n	8003d30 <_svfiprintf_r+0x174>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	065b      	lsls	r3, r3, #25
 8003d86:	f53f af2d 	bmi.w	8003be4 <_svfiprintf_r+0x28>
 8003d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d8c:	e72c      	b.n	8003be8 <_svfiprintf_r+0x2c>
 8003d8e:	ab03      	add	r3, sp, #12
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	462a      	mov	r2, r5
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <_svfiprintf_r+0x1f0>)
 8003d96:	a904      	add	r1, sp, #16
 8003d98:	4638      	mov	r0, r7
 8003d9a:	f000 f879 	bl	8003e90 <_printf_i>
 8003d9e:	e7ed      	b.n	8003d7c <_svfiprintf_r+0x1c0>
 8003da0:	08004220 	.word	0x08004220
 8003da4:	0800422a 	.word	0x0800422a
 8003da8:	00000000 	.word	0x00000000
 8003dac:	08003b05 	.word	0x08003b05
 8003db0:	08004226 	.word	0x08004226

08003db4 <_printf_common>:
 8003db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	4616      	mov	r6, r2
 8003dba:	4698      	mov	r8, r3
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bfb8      	it	lt
 8003dc8:	4613      	movlt	r3, r2
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	b10a      	cbz	r2, 8003dda <_printf_common+0x26>
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	0699      	lsls	r1, r3, #26
 8003dde:	bf42      	ittt	mi
 8003de0:	6833      	ldrmi	r3, [r6, #0]
 8003de2:	3302      	addmi	r3, #2
 8003de4:	6033      	strmi	r3, [r6, #0]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	f015 0506 	ands.w	r5, r5, #6
 8003dec:	d106      	bne.n	8003dfc <_printf_common+0x48>
 8003dee:	f104 0a19 	add.w	sl, r4, #25
 8003df2:	68e3      	ldr	r3, [r4, #12]
 8003df4:	6832      	ldr	r2, [r6, #0]
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	dc26      	bgt.n	8003e4a <_printf_common+0x96>
 8003dfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	3b00      	subs	r3, #0
 8003e04:	bf18      	it	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	0692      	lsls	r2, r2, #26
 8003e0a:	d42b      	bmi.n	8003e64 <_printf_common+0xb0>
 8003e0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e10:	4641      	mov	r1, r8
 8003e12:	4638      	mov	r0, r7
 8003e14:	47c8      	blx	r9
 8003e16:	3001      	adds	r0, #1
 8003e18:	d01e      	beq.n	8003e58 <_printf_common+0xa4>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	6922      	ldr	r2, [r4, #16]
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	bf02      	ittt	eq
 8003e26:	68e5      	ldreq	r5, [r4, #12]
 8003e28:	6833      	ldreq	r3, [r6, #0]
 8003e2a:	1aed      	subeq	r5, r5, r3
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	bf0c      	ite	eq
 8003e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e34:	2500      	movne	r5, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bfc4      	itt	gt
 8003e3a:	1a9b      	subgt	r3, r3, r2
 8003e3c:	18ed      	addgt	r5, r5, r3
 8003e3e:	2600      	movs	r6, #0
 8003e40:	341a      	adds	r4, #26
 8003e42:	42b5      	cmp	r5, r6
 8003e44:	d11a      	bne.n	8003e7c <_printf_common+0xc8>
 8003e46:	2000      	movs	r0, #0
 8003e48:	e008      	b.n	8003e5c <_printf_common+0xa8>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4652      	mov	r2, sl
 8003e4e:	4641      	mov	r1, r8
 8003e50:	4638      	mov	r0, r7
 8003e52:	47c8      	blx	r9
 8003e54:	3001      	adds	r0, #1
 8003e56:	d103      	bne.n	8003e60 <_printf_common+0xac>
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e60:	3501      	adds	r5, #1
 8003e62:	e7c6      	b.n	8003df2 <_printf_common+0x3e>
 8003e64:	18e1      	adds	r1, r4, r3
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	2030      	movs	r0, #48	@ 0x30
 8003e6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e6e:	4422      	add	r2, r4
 8003e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e78:	3302      	adds	r3, #2
 8003e7a:	e7c7      	b.n	8003e0c <_printf_common+0x58>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4622      	mov	r2, r4
 8003e80:	4641      	mov	r1, r8
 8003e82:	4638      	mov	r0, r7
 8003e84:	47c8      	blx	r9
 8003e86:	3001      	adds	r0, #1
 8003e88:	d0e6      	beq.n	8003e58 <_printf_common+0xa4>
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e7d9      	b.n	8003e42 <_printf_common+0x8e>
	...

08003e90 <_printf_i>:
 8003e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	7e0f      	ldrb	r7, [r1, #24]
 8003e96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e98:	2f78      	cmp	r7, #120	@ 0x78
 8003e9a:	4691      	mov	r9, r2
 8003e9c:	4680      	mov	r8, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	469a      	mov	sl, r3
 8003ea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ea6:	d807      	bhi.n	8003eb8 <_printf_i+0x28>
 8003ea8:	2f62      	cmp	r7, #98	@ 0x62
 8003eaa:	d80a      	bhi.n	8003ec2 <_printf_i+0x32>
 8003eac:	2f00      	cmp	r7, #0
 8003eae:	f000 80d1 	beq.w	8004054 <_printf_i+0x1c4>
 8003eb2:	2f58      	cmp	r7, #88	@ 0x58
 8003eb4:	f000 80b8 	beq.w	8004028 <_printf_i+0x198>
 8003eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ec0:	e03a      	b.n	8003f38 <_printf_i+0xa8>
 8003ec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ec6:	2b15      	cmp	r3, #21
 8003ec8:	d8f6      	bhi.n	8003eb8 <_printf_i+0x28>
 8003eca:	a101      	add	r1, pc, #4	@ (adr r1, 8003ed0 <_printf_i+0x40>)
 8003ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003eb9 	.word	0x08003eb9
 8003edc:	08003eb9 	.word	0x08003eb9
 8003ee0:	08003eb9 	.word	0x08003eb9
 8003ee4:	08003eb9 	.word	0x08003eb9
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003eb9 	.word	0x08003eb9
 8003ef0:	08003eb9 	.word	0x08003eb9
 8003ef4:	08003eb9 	.word	0x08003eb9
 8003ef8:	08003eb9 	.word	0x08003eb9
 8003efc:	0800403b 	.word	0x0800403b
 8003f00:	08003f67 	.word	0x08003f67
 8003f04:	08003ff5 	.word	0x08003ff5
 8003f08:	08003eb9 	.word	0x08003eb9
 8003f0c:	08003eb9 	.word	0x08003eb9
 8003f10:	0800405d 	.word	0x0800405d
 8003f14:	08003eb9 	.word	0x08003eb9
 8003f18:	08003f67 	.word	0x08003f67
 8003f1c:	08003eb9 	.word	0x08003eb9
 8003f20:	08003eb9 	.word	0x08003eb9
 8003f24:	08003ffd 	.word	0x08003ffd
 8003f28:	6833      	ldr	r3, [r6, #0]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6032      	str	r2, [r6, #0]
 8003f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e09c      	b.n	8004076 <_printf_i+0x1e6>
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	6820      	ldr	r0, [r4, #0]
 8003f40:	1d19      	adds	r1, r3, #4
 8003f42:	6031      	str	r1, [r6, #0]
 8003f44:	0606      	lsls	r6, r0, #24
 8003f46:	d501      	bpl.n	8003f4c <_printf_i+0xbc>
 8003f48:	681d      	ldr	r5, [r3, #0]
 8003f4a:	e003      	b.n	8003f54 <_printf_i+0xc4>
 8003f4c:	0645      	lsls	r5, r0, #25
 8003f4e:	d5fb      	bpl.n	8003f48 <_printf_i+0xb8>
 8003f50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	da03      	bge.n	8003f60 <_printf_i+0xd0>
 8003f58:	232d      	movs	r3, #45	@ 0x2d
 8003f5a:	426d      	negs	r5, r5
 8003f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f60:	4858      	ldr	r0, [pc, #352]	@ (80040c4 <_printf_i+0x234>)
 8003f62:	230a      	movs	r3, #10
 8003f64:	e011      	b.n	8003f8a <_printf_i+0xfa>
 8003f66:	6821      	ldr	r1, [r4, #0]
 8003f68:	6833      	ldr	r3, [r6, #0]
 8003f6a:	0608      	lsls	r0, r1, #24
 8003f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f70:	d402      	bmi.n	8003f78 <_printf_i+0xe8>
 8003f72:	0649      	lsls	r1, r1, #25
 8003f74:	bf48      	it	mi
 8003f76:	b2ad      	uxthmi	r5, r5
 8003f78:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f7a:	4852      	ldr	r0, [pc, #328]	@ (80040c4 <_printf_i+0x234>)
 8003f7c:	6033      	str	r3, [r6, #0]
 8003f7e:	bf14      	ite	ne
 8003f80:	230a      	movne	r3, #10
 8003f82:	2308      	moveq	r3, #8
 8003f84:	2100      	movs	r1, #0
 8003f86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f8a:	6866      	ldr	r6, [r4, #4]
 8003f8c:	60a6      	str	r6, [r4, #8]
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	db05      	blt.n	8003f9e <_printf_i+0x10e>
 8003f92:	6821      	ldr	r1, [r4, #0]
 8003f94:	432e      	orrs	r6, r5
 8003f96:	f021 0104 	bic.w	r1, r1, #4
 8003f9a:	6021      	str	r1, [r4, #0]
 8003f9c:	d04b      	beq.n	8004036 <_printf_i+0x1a6>
 8003f9e:	4616      	mov	r6, r2
 8003fa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fa4:	fb03 5711 	mls	r7, r3, r1, r5
 8003fa8:	5dc7      	ldrb	r7, [r0, r7]
 8003faa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fae:	462f      	mov	r7, r5
 8003fb0:	42bb      	cmp	r3, r7
 8003fb2:	460d      	mov	r5, r1
 8003fb4:	d9f4      	bls.n	8003fa0 <_printf_i+0x110>
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d10b      	bne.n	8003fd2 <_printf_i+0x142>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	07df      	lsls	r7, r3, #31
 8003fbe:	d508      	bpl.n	8003fd2 <_printf_i+0x142>
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	6861      	ldr	r1, [r4, #4]
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	bfde      	ittt	le
 8003fc8:	2330      	movle	r3, #48	@ 0x30
 8003fca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd2:	1b92      	subs	r2, r2, r6
 8003fd4:	6122      	str	r2, [r4, #16]
 8003fd6:	f8cd a000 	str.w	sl, [sp]
 8003fda:	464b      	mov	r3, r9
 8003fdc:	aa03      	add	r2, sp, #12
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4640      	mov	r0, r8
 8003fe2:	f7ff fee7 	bl	8003db4 <_printf_common>
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d14a      	bne.n	8004080 <_printf_i+0x1f0>
 8003fea:	f04f 30ff 	mov.w	r0, #4294967295
 8003fee:	b004      	add	sp, #16
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	f043 0320 	orr.w	r3, r3, #32
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	4832      	ldr	r0, [pc, #200]	@ (80040c8 <_printf_i+0x238>)
 8003ffe:	2778      	movs	r7, #120	@ 0x78
 8004000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	6831      	ldr	r1, [r6, #0]
 8004008:	061f      	lsls	r7, r3, #24
 800400a:	f851 5b04 	ldr.w	r5, [r1], #4
 800400e:	d402      	bmi.n	8004016 <_printf_i+0x186>
 8004010:	065f      	lsls	r7, r3, #25
 8004012:	bf48      	it	mi
 8004014:	b2ad      	uxthmi	r5, r5
 8004016:	6031      	str	r1, [r6, #0]
 8004018:	07d9      	lsls	r1, r3, #31
 800401a:	bf44      	itt	mi
 800401c:	f043 0320 	orrmi.w	r3, r3, #32
 8004020:	6023      	strmi	r3, [r4, #0]
 8004022:	b11d      	cbz	r5, 800402c <_printf_i+0x19c>
 8004024:	2310      	movs	r3, #16
 8004026:	e7ad      	b.n	8003f84 <_printf_i+0xf4>
 8004028:	4826      	ldr	r0, [pc, #152]	@ (80040c4 <_printf_i+0x234>)
 800402a:	e7e9      	b.n	8004000 <_printf_i+0x170>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f023 0320 	bic.w	r3, r3, #32
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	e7f6      	b.n	8004024 <_printf_i+0x194>
 8004036:	4616      	mov	r6, r2
 8004038:	e7bd      	b.n	8003fb6 <_printf_i+0x126>
 800403a:	6833      	ldr	r3, [r6, #0]
 800403c:	6825      	ldr	r5, [r4, #0]
 800403e:	6961      	ldr	r1, [r4, #20]
 8004040:	1d18      	adds	r0, r3, #4
 8004042:	6030      	str	r0, [r6, #0]
 8004044:	062e      	lsls	r6, r5, #24
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	d501      	bpl.n	800404e <_printf_i+0x1be>
 800404a:	6019      	str	r1, [r3, #0]
 800404c:	e002      	b.n	8004054 <_printf_i+0x1c4>
 800404e:	0668      	lsls	r0, r5, #25
 8004050:	d5fb      	bpl.n	800404a <_printf_i+0x1ba>
 8004052:	8019      	strh	r1, [r3, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	4616      	mov	r6, r2
 800405a:	e7bc      	b.n	8003fd6 <_printf_i+0x146>
 800405c:	6833      	ldr	r3, [r6, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	6032      	str	r2, [r6, #0]
 8004062:	681e      	ldr	r6, [r3, #0]
 8004064:	6862      	ldr	r2, [r4, #4]
 8004066:	2100      	movs	r1, #0
 8004068:	4630      	mov	r0, r6
 800406a:	f7fc f8b9 	bl	80001e0 <memchr>
 800406e:	b108      	cbz	r0, 8004074 <_printf_i+0x1e4>
 8004070:	1b80      	subs	r0, r0, r6
 8004072:	6060      	str	r0, [r4, #4]
 8004074:	6863      	ldr	r3, [r4, #4]
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	2300      	movs	r3, #0
 800407a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800407e:	e7aa      	b.n	8003fd6 <_printf_i+0x146>
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	4632      	mov	r2, r6
 8004084:	4649      	mov	r1, r9
 8004086:	4640      	mov	r0, r8
 8004088:	47d0      	blx	sl
 800408a:	3001      	adds	r0, #1
 800408c:	d0ad      	beq.n	8003fea <_printf_i+0x15a>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	079b      	lsls	r3, r3, #30
 8004092:	d413      	bmi.n	80040bc <_printf_i+0x22c>
 8004094:	68e0      	ldr	r0, [r4, #12]
 8004096:	9b03      	ldr	r3, [sp, #12]
 8004098:	4298      	cmp	r0, r3
 800409a:	bfb8      	it	lt
 800409c:	4618      	movlt	r0, r3
 800409e:	e7a6      	b.n	8003fee <_printf_i+0x15e>
 80040a0:	2301      	movs	r3, #1
 80040a2:	4632      	mov	r2, r6
 80040a4:	4649      	mov	r1, r9
 80040a6:	4640      	mov	r0, r8
 80040a8:	47d0      	blx	sl
 80040aa:	3001      	adds	r0, #1
 80040ac:	d09d      	beq.n	8003fea <_printf_i+0x15a>
 80040ae:	3501      	adds	r5, #1
 80040b0:	68e3      	ldr	r3, [r4, #12]
 80040b2:	9903      	ldr	r1, [sp, #12]
 80040b4:	1a5b      	subs	r3, r3, r1
 80040b6:	42ab      	cmp	r3, r5
 80040b8:	dcf2      	bgt.n	80040a0 <_printf_i+0x210>
 80040ba:	e7eb      	b.n	8004094 <_printf_i+0x204>
 80040bc:	2500      	movs	r5, #0
 80040be:	f104 0619 	add.w	r6, r4, #25
 80040c2:	e7f5      	b.n	80040b0 <_printf_i+0x220>
 80040c4:	08004231 	.word	0x08004231
 80040c8:	08004242 	.word	0x08004242

080040cc <memmove>:
 80040cc:	4288      	cmp	r0, r1
 80040ce:	b510      	push	{r4, lr}
 80040d0:	eb01 0402 	add.w	r4, r1, r2
 80040d4:	d902      	bls.n	80040dc <memmove+0x10>
 80040d6:	4284      	cmp	r4, r0
 80040d8:	4623      	mov	r3, r4
 80040da:	d807      	bhi.n	80040ec <memmove+0x20>
 80040dc:	1e43      	subs	r3, r0, #1
 80040de:	42a1      	cmp	r1, r4
 80040e0:	d008      	beq.n	80040f4 <memmove+0x28>
 80040e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040ea:	e7f8      	b.n	80040de <memmove+0x12>
 80040ec:	4402      	add	r2, r0
 80040ee:	4601      	mov	r1, r0
 80040f0:	428a      	cmp	r2, r1
 80040f2:	d100      	bne.n	80040f6 <memmove+0x2a>
 80040f4:	bd10      	pop	{r4, pc}
 80040f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040fe:	e7f7      	b.n	80040f0 <memmove+0x24>

08004100 <_sbrk_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d06      	ldr	r5, [pc, #24]	@ (800411c <_sbrk_r+0x1c>)
 8004104:	2300      	movs	r3, #0
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	602b      	str	r3, [r5, #0]
 800410c:	f7fc ff0e 	bl	8000f2c <_sbrk>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_sbrk_r+0x1a>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_sbrk_r+0x1a>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	20000240 	.word	0x20000240

08004120 <memcpy>:
 8004120:	440a      	add	r2, r1
 8004122:	4291      	cmp	r1, r2
 8004124:	f100 33ff 	add.w	r3, r0, #4294967295
 8004128:	d100      	bne.n	800412c <memcpy+0xc>
 800412a:	4770      	bx	lr
 800412c:	b510      	push	{r4, lr}
 800412e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004132:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004136:	4291      	cmp	r1, r2
 8004138:	d1f9      	bne.n	800412e <memcpy+0xe>
 800413a:	bd10      	pop	{r4, pc}

0800413c <_realloc_r>:
 800413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004140:	4607      	mov	r7, r0
 8004142:	4614      	mov	r4, r2
 8004144:	460d      	mov	r5, r1
 8004146:	b921      	cbnz	r1, 8004152 <_realloc_r+0x16>
 8004148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800414c:	4611      	mov	r1, r2
 800414e:	f7ff bc4d 	b.w	80039ec <_malloc_r>
 8004152:	b92a      	cbnz	r2, 8004160 <_realloc_r+0x24>
 8004154:	f7ff fbde 	bl	8003914 <_free_r>
 8004158:	4625      	mov	r5, r4
 800415a:	4628      	mov	r0, r5
 800415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004160:	f000 f81a 	bl	8004198 <_malloc_usable_size_r>
 8004164:	4284      	cmp	r4, r0
 8004166:	4606      	mov	r6, r0
 8004168:	d802      	bhi.n	8004170 <_realloc_r+0x34>
 800416a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800416e:	d8f4      	bhi.n	800415a <_realloc_r+0x1e>
 8004170:	4621      	mov	r1, r4
 8004172:	4638      	mov	r0, r7
 8004174:	f7ff fc3a 	bl	80039ec <_malloc_r>
 8004178:	4680      	mov	r8, r0
 800417a:	b908      	cbnz	r0, 8004180 <_realloc_r+0x44>
 800417c:	4645      	mov	r5, r8
 800417e:	e7ec      	b.n	800415a <_realloc_r+0x1e>
 8004180:	42b4      	cmp	r4, r6
 8004182:	4622      	mov	r2, r4
 8004184:	4629      	mov	r1, r5
 8004186:	bf28      	it	cs
 8004188:	4632      	movcs	r2, r6
 800418a:	f7ff ffc9 	bl	8004120 <memcpy>
 800418e:	4629      	mov	r1, r5
 8004190:	4638      	mov	r0, r7
 8004192:	f7ff fbbf 	bl	8003914 <_free_r>
 8004196:	e7f1      	b.n	800417c <_realloc_r+0x40>

08004198 <_malloc_usable_size_r>:
 8004198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800419c:	1f18      	subs	r0, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfbc      	itt	lt
 80041a2:	580b      	ldrlt	r3, [r1, r0]
 80041a4:	18c0      	addlt	r0, r0, r3
 80041a6:	4770      	bx	lr

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
